/* tslint:disable */
/* eslint-disable */
/**
 * AWS Docs API
 * API for AWS Docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CreateUpdateDetails,
    CreateUpdateDetailsFromJSON,
    CreateUpdateDetailsFromJSONTyped,
    CreateUpdateDetailsToJSON,
} from './CreateUpdateDetails';
import {
    ExtractionAccuracy,
    ExtractionAccuracyFromJSON,
    ExtractionAccuracyFromJSONTyped,
    ExtractionAccuracyToJSON,
} from './ExtractionAccuracy';
import {
    ExtractionExecution,
    ExtractionExecutionFromJSON,
    ExtractionExecutionFromJSONTyped,
    ExtractionExecutionToJSON,
} from './ExtractionExecution';
import {
    FormJSONSchema,
    FormJSONSchemaFromJSON,
    FormJSONSchemaFromJSONTyped,
    FormJSONSchemaToJSON,
} from './FormJSONSchema';
import {
    S3Location,
    S3LocationFromJSON,
    S3LocationFromJSONTyped,
    S3LocationToJSON,
} from './S3Location';
import {
    StatusTransition,
    StatusTransitionFromJSON,
    StatusTransitionFromJSONTyped,
    StatusTransitionToJSON,
} from './StatusTransition';

/**
 * Metadata about a form within a document
 * @export
 * @interface FormMetadata
 */
export interface FormMetadata {
    /**
     * 
     * @type {string}
     * @memberof FormMetadata
     */
    documentId: string;
    /**
     * 
     * @type {string}
     * @memberof FormMetadata
     */
    documentName: string;
    /**
     * 
     * @type {string}
     * @memberof FormMetadata
     */
    formId: string;
    /**
     * 
     * @type {string}
     * @memberof FormMetadata
     */
    schemaId: string;
    /**
     * The number of pages in the form
     * @type {number}
     * @memberof FormMetadata
     */
    numberOfPages: number;
    /**
     * 
     * @type {number}
     * @memberof FormMetadata
     */
    startPageIndex: number;
    /**
     * 
     * @type {number}
     * @memberof FormMetadata
     */
    endPageIndex: number;
    /**
     * 
     * @type {S3Location}
     * @memberof FormMetadata
     */
    location: S3Location;
    /**
     * 
     * @type {ExtractionExecution}
     * @memberof FormMetadata
     */
    extractionExecution: ExtractionExecution;
    /**
     * Data extracted from the form - has any type, will be of the shape of the schema. This can be modified by reviewers who may correct data that has been inaccurately extracted
     * @type {any}
     * @memberof FormMetadata
     */
    extractedData?: any | null;
    /**
     * The original data extracted from the form - has any type, will be of the shape of the schema. This is what was originally extracted by the system, prior to any human review.
     * @type {any}
     * @memberof FormMetadata
     */
    originalExtractedData?: any | null;
    /**
     * Metadata of extracted data values, of same shape as the data above, but leaf values contain confidence and bounding box metadata.
     * @type {any}
     * @memberof FormMetadata
     */
    extractedDataMetadata?: any | null;
    /**
     * 
     * @type {ExtractionAccuracy}
     * @memberof FormMetadata
     */
    extractionAccuracy?: ExtractionAccuracy;
    /**
     * The average confidence computed by textract for all fields in the form
     * @type {number}
     * @memberof FormMetadata
     */
    averageConfidence?: number;
    /**
     * 
     * @type {FormJSONSchema}
     * @memberof FormMetadata
     */
    schemaSnapshot: FormJSONSchema;
    /**
     * Presigned url for fetching the document (returned on get individual form only)
     * @type {string}
     * @memberof FormMetadata
     */
    url?: string;
    /**
     * 
     * @type {S3Location}
     * @memberof FormMetadata
     */
    textractOutputLocation?: S3Location;
    /**
     * A log of status transitions
     * @type {Array<StatusTransition>}
     * @memberof FormMetadata
     */
    statusTransitionLog: Array<StatusTransition>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FormMetadata
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof FormMetadata
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof FormMetadata
     */
    createdBy?: string;
    /**
     * 
     * @type {string}
     * @memberof FormMetadata
     */
    updatedBy?: string;
    /**
     * 
     * @type {string}
     * @memberof FormMetadata
     */
    createdTimestamp?: string;
    /**
     * 
     * @type {string}
     * @memberof FormMetadata
     */
    updatedTimestamp?: string;
}


export function FormMetadataFromJSON(json: any): FormMetadata {
    return FormMetadataFromJSONTyped(json, false);
}

export function FormMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'documentId': json['documentId'],
        'documentName': json['documentName'],
        'formId': json['formId'],
        'schemaId': json['schemaId'],
        'numberOfPages': json['numberOfPages'],
        'startPageIndex': json['startPageIndex'],
        'endPageIndex': json['endPageIndex'],
        'location': S3LocationFromJSON(json['location']),
        'extractionExecution': ExtractionExecutionFromJSON(json['extractionExecution']),
        'extractedData': !exists(json, 'extractedData') ? undefined : json['extractedData'],
        'originalExtractedData': !exists(json, 'originalExtractedData') ? undefined : json['originalExtractedData'],
        'extractedDataMetadata': !exists(json, 'extractedDataMetadata') ? undefined : json['extractedDataMetadata'],
        'extractionAccuracy': !exists(json, 'extractionAccuracy') ? undefined : ExtractionAccuracyFromJSON(json['extractionAccuracy']),
        'averageConfidence': !exists(json, 'averageConfidence') ? undefined : json['averageConfidence'],
        'schemaSnapshot': FormJSONSchemaFromJSON(json['schemaSnapshot']),
        'url': !exists(json, 'url') ? undefined : json['url'],
        'textractOutputLocation': !exists(json, 'textractOutputLocation') ? undefined : S3LocationFromJSON(json['textractOutputLocation']),
        'statusTransitionLog': ((json['statusTransitionLog'] as Array<any>).map(StatusTransitionFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'updatedBy': !exists(json, 'updatedBy') ? undefined : json['updatedBy'],
        'createdTimestamp': !exists(json, 'createdTimestamp') ? undefined : json['createdTimestamp'],
        'updatedTimestamp': !exists(json, 'updatedTimestamp') ? undefined : json['updatedTimestamp'],
    };
}

export function FormMetadataToJSON(value?: FormMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'documentId': value.documentId,
        'documentName': value.documentName,
        'formId': value.formId,
        'schemaId': value.schemaId,
        'numberOfPages': value.numberOfPages,
        'startPageIndex': value.startPageIndex,
        'endPageIndex': value.endPageIndex,
        'location': S3LocationToJSON(value.location),
        'extractionExecution': ExtractionExecutionToJSON(value.extractionExecution),
        'extractedData': value.extractedData,
        'originalExtractedData': value.originalExtractedData,
        'extractedDataMetadata': value.extractedDataMetadata,
        'extractionAccuracy': ExtractionAccuracyToJSON(value.extractionAccuracy),
        'averageConfidence': value.averageConfidence,
        'schemaSnapshot': FormJSONSchemaToJSON(value.schemaSnapshot),
        'url': value.url,
        'textractOutputLocation': S3LocationToJSON(value.textractOutputLocation),
        'statusTransitionLog': ((value.statusTransitionLog as Array<any>).map(StatusTransitionToJSON)),
        'tags': value.tags,
        'notes': value.notes,
        'createdBy': value.createdBy,
        'updatedBy': value.updatedBy,
        'createdTimestamp': value.createdTimestamp,
        'updatedTimestamp': value.updatedTimestamp,
    };
}

