# coding: utf-8

"""
    AWS Docs API

    API for AWS Docs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from api_python_client import schemas  # noqa: F401


class AggregateDocumentMetrics(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Aggregated metrics for documents
    """


    class MetaOapg:
        class properties:
            averageClassificationTimeMilliseconds = schemas.IntSchema
            averageClassificationTimePerPageMilliseconds = schemas.IntSchema
            totalProcessedDocumentCount = schemas.IntSchema
            totalSuccessfulDocumentCount = schemas.IntSchema
            totalFailedDocumentCount = schemas.IntSchema
            __annotations__ = {
                "averageClassificationTimeMilliseconds": averageClassificationTimeMilliseconds,
                "averageClassificationTimePerPageMilliseconds": averageClassificationTimePerPageMilliseconds,
                "totalProcessedDocumentCount": totalProcessedDocumentCount,
                "totalSuccessfulDocumentCount": totalSuccessfulDocumentCount,
                "totalFailedDocumentCount": totalFailedDocumentCount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["averageClassificationTimeMilliseconds"]) -> MetaOapg.properties.averageClassificationTimeMilliseconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["averageClassificationTimePerPageMilliseconds"]) -> MetaOapg.properties.averageClassificationTimePerPageMilliseconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["totalProcessedDocumentCount"]) -> MetaOapg.properties.totalProcessedDocumentCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["totalSuccessfulDocumentCount"]) -> MetaOapg.properties.totalSuccessfulDocumentCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["totalFailedDocumentCount"]) -> MetaOapg.properties.totalFailedDocumentCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing.Literal["averageClassificationTimeMilliseconds", "averageClassificationTimePerPageMilliseconds", "totalProcessedDocumentCount", "totalSuccessfulDocumentCount", "totalFailedDocumentCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["averageClassificationTimeMilliseconds"]) -> typing.Union[MetaOapg.properties.averageClassificationTimeMilliseconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["averageClassificationTimePerPageMilliseconds"]) -> typing.Union[MetaOapg.properties.averageClassificationTimePerPageMilliseconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["totalProcessedDocumentCount"]) -> typing.Union[MetaOapg.properties.totalProcessedDocumentCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["totalSuccessfulDocumentCount"]) -> typing.Union[MetaOapg.properties.totalSuccessfulDocumentCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["totalFailedDocumentCount"]) -> typing.Union[MetaOapg.properties.totalFailedDocumentCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing.Literal["averageClassificationTimeMilliseconds", "averageClassificationTimePerPageMilliseconds", "totalProcessedDocumentCount", "totalSuccessfulDocumentCount", "totalFailedDocumentCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        averageClassificationTimeMilliseconds: typing.Union[MetaOapg.properties.averageClassificationTimeMilliseconds, int, schemas.Unset] = schemas.unset,
        averageClassificationTimePerPageMilliseconds: typing.Union[MetaOapg.properties.averageClassificationTimePerPageMilliseconds, int, schemas.Unset] = schemas.unset,
        totalProcessedDocumentCount: typing.Union[MetaOapg.properties.totalProcessedDocumentCount, int, schemas.Unset] = schemas.unset,
        totalSuccessfulDocumentCount: typing.Union[MetaOapg.properties.totalSuccessfulDocumentCount, int, schemas.Unset] = schemas.unset,
        totalFailedDocumentCount: typing.Union[MetaOapg.properties.totalFailedDocumentCount, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AggregateDocumentMetrics':
        return super().__new__(
            cls,
            *args,
            averageClassificationTimeMilliseconds=averageClassificationTimeMilliseconds,
            averageClassificationTimePerPageMilliseconds=averageClassificationTimePerPageMilliseconds,
            totalProcessedDocumentCount=totalProcessedDocumentCount,
            totalSuccessfulDocumentCount=totalSuccessfulDocumentCount,
            totalFailedDocumentCount=totalFailedDocumentCount,
            _configuration=_configuration,
            **kwargs,
        )
