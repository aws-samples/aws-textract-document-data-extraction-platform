# coding: utf-8

"""
    AWS Docs API

    API for AWS Docs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aws_api_python_runtime import schemas  # noqa: F401


class ExtractionExecution(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Describes the execution of the form data extraction pipeline
    """


    class MetaOapg:
        required = {
            "executionId",
            "status",
        }
        
        class properties:
            executionId = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['ExtractionExecutionStatus']:
                return ExtractionExecutionStatus
            statusReason = schemas.StrSchema
            __annotations__ = {
                "executionId": executionId,
                "status": status,
                "statusReason": statusReason,
            }
    
    executionId: MetaOapg.properties.executionId
    status: 'ExtractionExecutionStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["executionId"]) -> MetaOapg.properties.executionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'ExtractionExecutionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusReason"]) -> MetaOapg.properties.statusReason: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["executionId", "status", "statusReason", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["executionId"]) -> MetaOapg.properties.executionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'ExtractionExecutionStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusReason"]) -> typing.Union[MetaOapg.properties.statusReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["executionId", "status", "statusReason", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        executionId: typing.Union[MetaOapg.properties.executionId, str, ],
        status: 'ExtractionExecutionStatus',
        statusReason: typing.Union[MetaOapg.properties.statusReason, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExtractionExecution':
        return super().__new__(
            cls,
            *_args,
            executionId=executionId,
            status=status,
            statusReason=statusReason,
            _configuration=_configuration,
            **kwargs,
        )

from aws_api_python_runtime.model.extraction_execution_status import ExtractionExecutionStatus
