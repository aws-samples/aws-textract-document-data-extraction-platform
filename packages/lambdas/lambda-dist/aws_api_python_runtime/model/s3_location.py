# coding: utf-8

"""
    AWS Docs API

    API for AWS Docs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aws_api_python_runtime import schemas  # noqa: F401


class S3Location(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A location in s3
    """


    class MetaOapg:
        required = {
            "bucket",
            "objectKey",
        }
        
        class properties:
            bucket = schemas.StrSchema
            objectKey = schemas.StrSchema
            __annotations__ = {
                "bucket": bucket,
                "objectKey": objectKey,
            }
    
    bucket: MetaOapg.properties.bucket
    objectKey: MetaOapg.properties.objectKey
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bucket"]) -> MetaOapg.properties.bucket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectKey"]) -> MetaOapg.properties.objectKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bucket", "objectKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bucket"]) -> MetaOapg.properties.bucket: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectKey"]) -> MetaOapg.properties.objectKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bucket", "objectKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        bucket: typing.Union[MetaOapg.properties.bucket, str, ],
        objectKey: typing.Union[MetaOapg.properties.objectKey, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'S3Location':
        return super().__new__(
            cls,
            *_args,
            bucket=bucket,
            objectKey=objectKey,
            _configuration=_configuration,
            **kwargs,
        )
