// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
{
  "Mappings": {
    "ServiceprincipalMap": {
      "af-south-1": {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-south-2": {
        "states": "states.ap-south-2.amazonaws.com",
      },
      "ap-southeast-1": {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ap-southeast-4": {
        "states": "states.ap-southeast-4.amazonaws.com",
      },
      "ca-central-1": {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-central-2": {
        "states": "states.eu-central-2.amazonaws.com",
      },
      "eu-north-1": {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "il-central-1": {
        "states": "states.il-central-1.amazonaws.com",
      },
      "me-central-1": {
        "states": "states.me-central-1.amazonaws.com",
      },
      "me-south-1": {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-west-1": {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Metadata": {
    "cdk_nag": {
      "rules_to_suppress": [
        {
          "id": "AwsSolutions-S1",
          "reason": "overkill for this small sample",
        },
        {
          "id": "AwsSolutions-IAM4",
          "reason": "Managed policies are sufficient for a sample of this size",
        },
        {
          "id": "AwsSolutions-IAM5",
          "reason": "Some dynamic wildcard permissions are required for several service actions",
        },
        {
          "id": "AwsSolutions-DDB3",
          "reason": "Point in time recovery is not required",
        },
        {
          "id": "AwsSolutions-L1",
          "reason": "Lambda functions are using python 3.9",
        },
        {
          "id": "AwsSolutions-SF1",
          "reason": "Step functions not required to log ALL events. They are logged in lambda functions.",
        },
      ],
    },
  },
  "Outputs": {
    "SourceStackSourceApiEndpoint0939B009": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "SourceStackSourceApiF90F7A80",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "SourceStackSourceApiDeploymentStageprod154CA529",
            },
            "/",
          ],
        ],
      },
    },
    "WebsiteStackDistributionDomainName2DC4301D": {
      "Value": {
        "Fn::GetAtt": [
          "WebsiteStackWebsiteCloudfrontDistribution88264F46",
          "DomainName",
        ],
      },
    },
    "WebsiteStackWebsiteDistributionDomainName4C2A5ADD": {
      "Value": {
        "Fn::GetAtt": [
          "WebsiteStackWebsiteCloudfrontDistribution88264F46",
          "DomainName",
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
      "DependsOn": [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "17c16a3854838fd3ff4bda08146122a6701f33b9c86ae17f415ad0dc47a97544.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthStackIdentityPool5D039486": {
      "Properties": {
        "AllowUnauthenticatedIdentities": false,
        "CognitoIdentityProviders": [
          {
            "ClientId": {
              "Ref": "AuthStackUserPoolUserPoolClientD4E6241D",
            },
            "ProviderName": {
              "Fn::GetAtt": [
                "AuthStackUserPool06B5763F",
                "ProviderName",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Cognito::IdentityPool",
    },
    "AuthStackUserPool06B5763F": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true,
        },
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": true,
            "RequireUppercase": true,
            "TemporaryPasswordValidityDays": 7,
          },
        },
        "Schema": [
          {
            "Mutable": true,
            "Name": "given_name",
            "Required": true,
          },
          {
            "Mutable": true,
            "Name": "family_name",
            "Required": true,
          },
          {
            "Mutable": true,
            "Name": "email",
            "Required": true,
          },
        ],
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UserPoolAddOns": {
          "AdvancedSecurityMode": "ENFORCED",
        },
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Retain",
    },
    "AuthStackUserPoolUserPoolClientD4E6241D": {
      "Properties": {
        "AllowedOAuthFlows": [
          "implicit",
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": [
          "profile",
          "phone",
          "email",
          "openid",
          "aws.cognito.signin.user.admin",
        ],
        "CallbackURLs": [
          "https://example.com",
        ],
        "ExplicitAuthFlows": [
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_ADMIN_USER_PASSWORD_AUTH",
          "ALLOW_CUSTOM_AUTH",
          "ALLOW_USER_SRP_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
        ],
        "GenerateSecret": false,
        "SupportedIdentityProviders": [
          "COGNITO",
        ],
        "UserPoolId": {
          "Ref": "AuthStackUserPool06B5763F",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
      "DependsOn": [
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e976a796f036a5efbf44b99e44cfb5a961df08d8dbf7cd37e60bf216fb982a00.zip",
        },
        "Environment": {
          "Variables": {
            "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem",
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "WebsiteStackWebsiteWebsiteDeploymentAwsCliLayer488459DE",
          },
        ],
        "Role": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebsiteStackWebsiteWebsiteBucketD8AC4343",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "WebsiteStackWebsiteWebsiteBucketD8AC4343",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "cloudfront:GetInvalidation",
                "cloudfront:CreateInvalidation",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "Roles": [
          {
            "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6.zip",
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "WebsiteStackWebsiteAccessLogsBucket2F80CF7F",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "PermissionsStackCognitoDefaultAuthenticatedRole7FC749B8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "authenticated",
                },
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "AuthStackIdentityPool5D039486",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "PermissionsStackCognitoDefaultAuthenticatedRoleDefaultPolicyA85856EC": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "execute-api:Invoke",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":",
                    {
                      "Ref": "SourceStackSourceApiF90F7A80",
                    },
                    "/*/*/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PermissionsStackCognitoDefaultAuthenticatedRoleDefaultPolicyA85856EC",
        "Roles": [
          {
            "Ref": "PermissionsStackCognitoDefaultAuthenticatedRole7FC749B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PermissionsStackCognitoDefaultUnauthenticatedRoleB6547E5B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "unauthenticated",
                },
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "AuthStackIdentityPool5D039486",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "PermissionsStackDefaultValid79EC5647": {
      "Properties": {
        "IdentityPoolId": {
          "Ref": "AuthStackIdentityPool5D039486",
        },
        "Roles": {
          "authenticated": {
            "Fn::GetAtt": [
              "PermissionsStackCognitoDefaultAuthenticatedRole7FC749B8",
              "Arn",
            ],
          },
          "unauthenticated": {
            "Fn::GetAtt": [
              "PermissionsStackCognitoDefaultUnauthenticatedRoleB6547E5B",
              "Arn",
            ],
          },
        },
      },
      "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
    },
    "SourceStackDocumentIngestionStateMachineDD233ACB": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "SourceStackDocumentIngestionStateMachineRoleDefaultPolicyAE367DBA",
        "SourceStackDocumentIngestionStateMachineRoleA00F6CA5",
      ],
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"SaveClassifiedForms","States":{"SaveClassifiedForms":{"Next":"ForEachClassifiedForm","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.ErrorDetails","Next":"OnError"}],"Type":"Task","ResultPath":"$.Payload.SaveClassifiedFormsOutput","Resource":"",
              {
                "Fn::GetAtt": [
                  "SourceStackDocumentIngestionStateMachinesaveclassifiedforms583C7D3E",
                  "Arn",
                ],
              },
              "","Parameters":{"document_id.$":"$.Payload.DocumentId","schema_id.$":"$.Payload.SchemaId","document_location.$":"$.Payload.DocumentLocation","caller.$":"$.Payload.CallingUser"}},"ForEachClassifiedForm":{"Type":"Map","ResultPath":"$.Payload.ExtractFormDataOutput","End":true,"OutputPath":"$.Payload.ExtractFormDataOutput","Iterator":{"StartAt":"ExtractFormData","States":{"ExtractFormData":{"End":true,"Type":"Task","ResultPath":"$.Payload.ExtractFormDataOutput","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::states:startExecution.sync:2","Parameters":{"Input":{"Payload":{"Form.$":"$"}},"StateMachineArn":"",
              {
                "Ref": "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachine2FEE6051",
              },
              ""}}}},"ItemsPath":"$.Payload.SaveClassifiedFormsOutput.forms"},"OnError":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","ResultPath":null,"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "SourceStackDocumentIngestionStateMachineonerror85817272",
                  "Arn",
                ],
              },
              "","Payload":{"payload.$":"$.Payload","document_id.$":"$.Payload.DocumentId","error_details.$":"$.ErrorDetails"}}}}}",
            ],
          ],
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "SourceStackDocumentIngestionStateMachineRoleA00F6CA5",
            "Arn",
          ],
        },
        "TracingConfiguration": {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachine2FEE6051": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineRoleDefaultPolicy4C48E026",
        "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineRoleD59B235F",
      ],
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"StartDataExtraction","States":{"StartDataExtraction":{"Next":"RunTextract","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.ErrorDetails","Next":"OnError"}],"Type":"Task","ResultPath":"$.Payload.StartDataExtractionOutput","Resource":"",
              {
                "Fn::GetAtt": [
                  "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachinestartdataextraction0AF27C0F",
                  "Arn",
                ],
              },
              "","Parameters":{"form.$":"$.Payload.Form","sfn_execution_arn.$":"$$.Execution.Id"}},"RunTextract":{"Next":"ExtractFormData","Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.ErrorDetails","Next":"OnError"}],"Type":"Task","ResultPath":"$.Payload.TextractOutput","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::states:startExecution.sync:2","Parameters":{"Input":{"Payload":{"DocumentLocation.$":"$.Payload.Form.location","FeatureTypes.$":"$.Payload.StartDataExtractionOutput.textract_feature_types","ExtraTextractArgs.$":"$.Payload.StartDataExtractionOutput.textract_extra_args"}},"StateMachineArn":"",
              {
                "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachineF454B70B",
              },
              ""}},"ExtractFormData":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.ErrorDetails","Next":"OnError"}],"Type":"Task","ResultPath":"$.Payload.ExtractFormDataOutput","Resource":"",
              {
                "Fn::GetAtt": [
                  "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineextractformdata3F420716",
                  "Arn",
                ],
              },
              "","Parameters":{"form.$":"$.Payload.Form","textract_job.$":"$.Payload.TextractOutput.Output"}},"OnError":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","ResultPath":null,"Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineonerror591E1258",
                  "Arn",
                ],
              },
              "","Payload":{"payload.$":"$.Payload","document_id.$":"$.Payload.Form.document_id","form_id.$":"$.Payload.Form.form_id","error_details.$":"$.ErrorDetails"}}}}}",
            ],
          ],
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineRoleD59B235F",
            "Arn",
          ],
        },
        "TracingConfiguration": {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineRoleD59B235F": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineRoleDefaultPolicy4C48E026": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachinestartdataextraction0AF27C0F",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachinestartdataextraction0AF27C0F",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachineF454B70B",
              },
            },
            {
              "Action": [
                "states:DescribeExecution",
                "states:StopExecution",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":states:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":execution:",
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            ":",
                            {
                              "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachineF454B70B",
                            },
                          ],
                        },
                      ],
                    },
                    "*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "events:PutTargets",
                "events:PutRule",
                "events:DescribeRule",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":events:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":rule/StepFunctionsGetEventsForStepFunctionsExecutionRule",
                  ],
                ],
              },
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineextractformdata3F420716",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineextractformdata3F420716",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineonerror591E1258",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineonerror591E1258",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineRoleDefaultPolicy4C48E026",
        "Roles": [
          {
            "Ref": "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineRoleD59B235F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineextractformdata3F420716": {
      "DependsOn": [
        "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineextractformdataServiceRoleDefaultPolicy408382AE",
        "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineextractformdataServiceRole069CBBBD",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c8b8c50daf6f55dd76723dce6646db96de9d1e552bb014c12ae9da68cd8cf5a5.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_lib/form_data_extraction_state_machine/extract_form_data.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineextractformdataServiceRole069CBBBD",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineextractformdataServiceRole069CBBBD": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineextractformdataServiceRoleDefaultPolicy408382AE": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormMetadata01CCFF0B",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentMetadataBB065190",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "textract:GetDocumentAnalysis",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackSourceDocumentBucket6F09666C",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackSourceDocumentBucket6F09666C",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "aws/disclosure-data-extraction",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineextractformdataServiceRoleDefaultPolicy408382AE",
        "Roles": [
          {
            "Ref": "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineextractformdataServiceRole069CBBBD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineonerror591E1258": {
      "DependsOn": [
        "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineonerrorServiceRoleDefaultPolicy49CA91CA",
        "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineonerrorServiceRole24921D5C",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c8b8c50daf6f55dd76723dce6646db96de9d1e552bb014c12ae9da68cd8cf5a5.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_lib/form_data_extraction_state_machine/on_error.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineonerrorServiceRole24921D5C",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineonerrorServiceRole24921D5C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineonerrorServiceRoleDefaultPolicy49CA91CA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormMetadata01CCFF0B",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "aws/disclosure-data-extraction",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineonerrorServiceRoleDefaultPolicy49CA91CA",
        "Roles": [
          {
            "Ref": "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachineonerrorServiceRole24921D5C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachinestartdataextraction0AF27C0F": {
      "DependsOn": [
        "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachinestartdataextractionServiceRoleDefaultPolicyEDA0879D",
        "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachinestartdataextractionServiceRole623F83D2",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c8b8c50daf6f55dd76723dce6646db96de9d1e552bb014c12ae9da68cd8cf5a5.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_lib/form_data_extraction_state_machine/start_data_extraction.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachinestartdataextractionServiceRole623F83D2",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachinestartdataextractionServiceRole623F83D2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachinestartdataextractionServiceRoleDefaultPolicyEDA0879D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormMetadata01CCFF0B",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachinestartdataextractionServiceRoleDefaultPolicyEDA0879D",
        "Roles": [
          {
            "Ref": "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachinestartdataextractionServiceRole623F83D2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackDocumentIngestionStateMachineRoleA00F6CA5": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackDocumentIngestionStateMachineRoleDefaultPolicyAE367DBA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentIngestionStateMachinesaveclassifiedforms583C7D3E",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackDocumentIngestionStateMachinesaveclassifiedforms583C7D3E",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachine2FEE6051",
              },
            },
            {
              "Action": [
                "states:DescribeExecution",
                "states:StopExecution",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":states:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":execution:",
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            ":",
                            {
                              "Ref": "SourceStackDocumentIngestionStateMachineFormDataExtractionStateMachine2FEE6051",
                            },
                          ],
                        },
                      ],
                    },
                    "*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "events:PutTargets",
                "events:PutRule",
                "events:DescribeRule",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":events:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":rule/StepFunctionsGetEventsForStepFunctionsExecutionRule",
                  ],
                ],
              },
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentIngestionStateMachineonerror85817272",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackDocumentIngestionStateMachineonerror85817272",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackDocumentIngestionStateMachineRoleDefaultPolicyAE367DBA",
        "Roles": [
          {
            "Ref": "SourceStackDocumentIngestionStateMachineRoleA00F6CA5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachineF454B70B": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "SourceStackDocumentIngestionStateMachineTextractStateMachineRoleDefaultPolicyA03D4621",
        "SourceStackDocumentIngestionStateMachineTextractStateMachineRole3F961A91",
      ],
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"RunTextract","States":{"RunTextract":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke.waitForTaskToken","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "SourceStackDocumentIngestionStateMachineTextractStateMachinestartjobFD7483E5",
                  "Arn",
                ],
              },
              "","Payload":{"document_location.$":"$.Payload.DocumentLocation","feature_types.$":"$.Payload.FeatureTypes","extra_textract_args.$":"$.Payload.ExtraTextractArgs","task_token.$":"$$.Task.Token","sns_topic_arn":"",
              {
                "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachineTextractTopic4844491E",
              },
              "","role_arn":"",
              {
                "Fn::GetAtt": [
                  "SourceStackDocumentIngestionStateMachineTextractStateMachinePublishRole2D8A6E12",
                  "Arn",
                ],
              },
              "","execution_id.$":"$$.Execution.Name"}}}}}",
            ],
          ],
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "SourceStackDocumentIngestionStateMachineTextractStateMachineRole3F961A91",
            "Arn",
          ],
        },
        "TracingConfiguration": {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachineMyKey5DC7E749": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachinePublishRole2D8A6E12": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "textract.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachinePublishRoleDefaultPolicyF53E4F13": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachineTextractTopic4844491E",
              },
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SourceStackDocumentIngestionStateMachineTextractStateMachineMyKey5DC7E749",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackDocumentIngestionStateMachineTextractStateMachinePublishRoleDefaultPolicyF53E4F13",
        "Roles": [
          {
            "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachinePublishRole2D8A6E12",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachineRole3F961A91": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachineRoleDefaultPolicyA03D4621": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentIngestionStateMachineTextractStateMachinestartjobFD7483E5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackDocumentIngestionStateMachineTextractStateMachinestartjobFD7483E5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackDocumentIngestionStateMachineTextractStateMachineRoleDefaultPolicyA03D4621",
        "Roles": [
          {
            "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachineRole3F961A91",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachineTextractTopic4844491E": {
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "SourceStackDocumentIngestionStateMachineTextractStateMachineMyKey5DC7E749",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SNS::Topic",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachineoncomplete485A6EC8": {
      "DependsOn": [
        "SourceStackDocumentIngestionStateMachineTextractStateMachineoncompleteServiceRoleDefaultPolicy0BADA272",
        "SourceStackDocumentIngestionStateMachineTextractStateMachineoncompleteServiceRole97AF1EB6",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c8b8c50daf6f55dd76723dce6646db96de9d1e552bb014c12ae9da68cd8cf5a5.zip",
        },
        "Environment": {
          "Variables": {
            "STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachineF454B70B",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_lib/textract_state_machine/on_complete.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackDocumentIngestionStateMachineTextractStateMachineoncompleteServiceRole97AF1EB6",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachineoncompleteAllowInvoketestSourceStackDocumentIngestionStateMachineTextractStateMachineTextractTopic452749EC5F9A91F5": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackDocumentIngestionStateMachineTextractStateMachineoncomplete485A6EC8",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachineTextractTopic4844491E",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachineoncompleteServiceRole97AF1EB6": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachineoncompleteServiceRoleDefaultPolicy0BADA272": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "states:SendTaskSuccess",
                "states:SendTaskFailure",
                "states:SendTaskHeartbeat",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachineF454B70B",
              },
            },
            {
              "Action": [
                "states:ListExecutions",
                "states:ListStateMachines",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachineF454B70B",
              },
            },
            {
              "Action": [
                "states:DescribeExecution",
                "states:DescribeStateMachineForExecution",
                "states:GetExecutionHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":states:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":execution:",
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            ":",
                            {
                              "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachineF454B70B",
                            },
                          ],
                        },
                      ],
                    },
                    ":*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "states:ListActivities",
                "states:DescribeStateMachine",
                "states:DescribeActivity",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "states:StopExecution",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":states:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":execution:",
                    {
                      "Fn::GetAtt": [
                        "SourceStackDocumentIngestionStateMachineTextractStateMachineF454B70B",
                        "Name",
                      ],
                    },
                    ":*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackDocumentIngestionStateMachineTextractStateMachineoncompleteServiceRoleDefaultPolicy0BADA272",
        "Roles": [
          {
            "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachineoncompleteServiceRole97AF1EB6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachineoncompleteTextractTopic0F136D71": {
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "SourceStackDocumentIngestionStateMachineTextractStateMachineoncomplete485A6EC8",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachineTextractTopic4844491E",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachinestartjobFD7483E5": {
      "DependsOn": [
        "SourceStackDocumentIngestionStateMachineTextractStateMachinestartjobServiceRoleDefaultPolicy93167FEE",
        "SourceStackDocumentIngestionStateMachineTextractStateMachinestartjobServiceRole8CDF15E4",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c8b8c50daf6f55dd76723dce6646db96de9d1e552bb014c12ae9da68cd8cf5a5.zip",
        },
        "Handler": "aws_document_extraction_platform_lib/textract_state_machine/start_job.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackDocumentIngestionStateMachineTextractStateMachinestartjobServiceRole8CDF15E4",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachinestartjobServiceRole8CDF15E4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackDocumentIngestionStateMachineTextractStateMachinestartjobServiceRoleDefaultPolicy93167FEE": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "textract:StartDocumentAnalysis",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackSourceDocumentBucket6F09666C",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackSourceDocumentBucket6F09666C",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackDocumentIngestionStateMachineTextractStateMachinestartjobServiceRoleDefaultPolicy93167FEE",
        "Roles": [
          {
            "Ref": "SourceStackDocumentIngestionStateMachineTextractStateMachinestartjobServiceRole8CDF15E4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackDocumentIngestionStateMachineonerror85817272": {
      "DependsOn": [
        "SourceStackDocumentIngestionStateMachineonerrorServiceRoleDefaultPolicy08A395D8",
        "SourceStackDocumentIngestionStateMachineonerrorServiceRoleCD365860",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c8b8c50daf6f55dd76723dce6646db96de9d1e552bb014c12ae9da68cd8cf5a5.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_lib/ingestion_state_machine/on_error.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackDocumentIngestionStateMachineonerrorServiceRoleCD365860",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackDocumentIngestionStateMachineonerrorServiceRoleCD365860": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackDocumentIngestionStateMachineonerrorServiceRoleDefaultPolicy08A395D8": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentMetadataBB065190",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "aws/disclosure-data-extraction",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackDocumentIngestionStateMachineonerrorServiceRoleDefaultPolicy08A395D8",
        "Roles": [
          {
            "Ref": "SourceStackDocumentIngestionStateMachineonerrorServiceRoleCD365860",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackDocumentIngestionStateMachinesaveclassifiedforms583C7D3E": {
      "DependsOn": [
        "SourceStackDocumentIngestionStateMachinesaveclassifiedformsServiceRoleDefaultPolicy71F5C32C",
        "SourceStackDocumentIngestionStateMachinesaveclassifiedformsServiceRole4D7F86AF",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c8b8c50daf6f55dd76723dce6646db96de9d1e552bb014c12ae9da68cd8cf5a5.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_lib/ingestion_state_machine/save_classified_forms.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackDocumentIngestionStateMachinesaveclassifiedformsServiceRole4D7F86AF",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackDocumentIngestionStateMachinesaveclassifiedformsServiceRole4D7F86AF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackDocumentIngestionStateMachinesaveclassifiedformsServiceRoleDefaultPolicy71F5C32C": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackSourceDocumentBucket6F09666C",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackSourceDocumentBucket6F09666C",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormMetadata01CCFF0B",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentMetadataBB065190",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormSchemasD034C24F",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "aws/disclosure-data-extraction",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackDocumentIngestionStateMachinesaveclassifiedformsServiceRoleDefaultPolicy71F5C32C",
        "Roles": [
          {
            "Ref": "SourceStackDocumentIngestionStateMachinesaveclassifiedformsServiceRole4D7F86AF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackDocumentMetadataBB065190": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "documentId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "documentId",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "SourceStackFormMetadata01CCFF0B": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "documentId",
            "AttributeType": "S",
          },
          {
            "AttributeName": "formId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "documentId",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "formId",
            "KeyType": "RANGE",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "SourceStackFormReviewWorkflowTagsE18CFD48": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "tagId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "tagId",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "SourceStackFormSchemasD034C24F": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "schemaId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "schemaId",
            "KeyType": "HASH",
          },
        ],
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "SourceStackPopulateDefaultDatadefaultFormReviewWorkflowTagURGENTATTENTIONCustomResourcePolicy4BE63EFE": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackPopulateDefaultDatadefaultFormReviewWorkflowTagURGENTATTENTIONCustomResourcePolicy4BE63EFE",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackPopulateDefaultDatadefaultFormReviewWorkflowTagURGENTATTENTIOND0290D61": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "SourceStackPopulateDefaultDatadefaultFormReviewWorkflowTagURGENTATTENTIONCustomResourcePolicy4BE63EFE",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "SourceStackSourceApiCreateFormReviewWorkflowTag5161D9DF",
                  "Arn",
                ],
              },
              "","Payload":"{\\"pathParameters\\":{},\\"queryStringParameters\\":{},\\"multiValueQueryStringParameters\\":{},\\"body\\":\\"{\\\\\\"tagText\\\\\\":\\\\\\"URGENT ATTENTION\\\\\\"}\\",\\"headers\\":{\\"x-username\\":\\"system\\"}}"},"physicalResourceId":{"id":"CreateFormReviewWorkflowTagURGENTATTENTION"},"outputPaths":["status"]}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": {
          "Fn::Join": [
            "",
            [
              "{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "SourceStackSourceApiCreateFormReviewWorkflowTag5161D9DF",
                  "Arn",
                ],
              },
              "","Payload":"{\\"pathParameters\\":{},\\"queryStringParameters\\":{},\\"multiValueQueryStringParameters\\":{},\\"body\\":\\"{\\\\\\"tagText\\\\\\":\\\\\\"URGENT ATTENTION\\\\\\"}\\",\\"headers\\":{\\"x-username\\":\\"system\\"}}"},"physicalResourceId":{"id":"CreateFormReviewWorkflowTagURGENTATTENTION"},"outputPaths":["status"]}",
            ],
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "SourceStackPopulateDefaultDatadefaultFormReviewWorkflowTagWatchlistItemCustomResourcePolicy18BF319C": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackPopulateDefaultDatadefaultFormReviewWorkflowTagWatchlistItemCustomResourcePolicy18BF319C",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackPopulateDefaultDatadefaultFormReviewWorkflowTagWatchlistItemD4C788C1": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "SourceStackPopulateDefaultDatadefaultFormReviewWorkflowTagWatchlistItemCustomResourcePolicy18BF319C",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "SourceStackSourceApiCreateFormReviewWorkflowTag5161D9DF",
                  "Arn",
                ],
              },
              "","Payload":"{\\"pathParameters\\":{},\\"queryStringParameters\\":{},\\"multiValueQueryStringParameters\\":{},\\"body\\":\\"{\\\\\\"tagText\\\\\\":\\\\\\"Watchlist Item\\\\\\"}\\",\\"headers\\":{\\"x-username\\":\\"system\\"}}"},"physicalResourceId":{"id":"CreateFormReviewWorkflowTagWatchlistItem"},"outputPaths":["status"]}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": {
          "Fn::Join": [
            "",
            [
              "{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "SourceStackSourceApiCreateFormReviewWorkflowTag5161D9DF",
                  "Arn",
                ],
              },
              "","Payload":"{\\"pathParameters\\":{},\\"queryStringParameters\\":{},\\"multiValueQueryStringParameters\\":{},\\"body\\":\\"{\\\\\\"tagText\\\\\\":\\\\\\"Watchlist Item\\\\\\"}\\",\\"headers\\":{\\"x-username\\":\\"system\\"}}"},"physicalResourceId":{"id":"CreateFormReviewWorkflowTagWatchlistItem"},"outputPaths":["status"]}",
            ],
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "SourceStackPopulateDefaultDatadefaultSchemaW8BENBBF49082": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "SourceStackPopulateDefaultDatadefaultSchemaW8BENCustomResourcePolicyA31E984A",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "SourceStackSourceApiCreateFormSchema16DF88BC",
                  "Arn",
                ],
              },
              "","Payload":"{\\"pathParameters\\":{},\\"queryStringParameters\\":{},\\"multiValueQueryStringParameters\\":{},\\"body\\":\\"{\\\\\\"title\\\\\\":\\\\\\"W-8BEN\\\\\\",\\\\\\"schema\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"W-8BEN\\\\\\",\\\\\\"description\\\\\\":\\\\\\"The W-8 form is a legal US Treasury document required by the Internal Revenue Service (IRS) that allows foreign investors to claim concessional tax treaty benefits, including a reduced rate of withholding tax\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"object\\\\\\",\\\\\\"properties\\\\\\":{\\\\\\"part1\\\\\\":{\\\\\\"typeOf\\\\\\":\\\\\\"object\\\\\\",\\\\\\"order\\\\\\":1,\\\\\\"properties\\\\\\":{\\\\\\"name\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Name of individual who is the beneficial owner\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":1,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Name of individual who is the beneficial owner\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Name of individual who is the beneficial owner?\\\\\\"}},\\\\\\"countryOfCitizenship\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Country of citizenship\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":2,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Country of citizenship\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Country of citizenship?\\\\\\"}},\\\\\\"address\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Permanent residence address\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":3,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Permanent residence address\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Permanent residence address?\\\\\\"}},\\\\\\"city\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"City or town, state or province. Include postal code where appropriate.\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":4,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"City or town, state or province. Include postal code where appropriate.\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the City or town, state or province below the permanent residence address?\\\\\\"}},\\\\\\"residenceAddressCountry\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Country\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":5,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Country\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the residence address country?\\\\\\"}},\\\\\\"mailingAddress\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Mailing address\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":6,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Mailing address (if different from above)\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Mailing address?\\\\\\"}},\\\\\\"mailingAddressCity\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"City or town, state or province. Include postal code where appropriate.\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":7,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"City or town, state or province. Include postal code where appropriate.\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the City or town, state or province below the mailing address?\\\\\\"}},\\\\\\"mailingAddressCountry\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Country\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":8,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Country\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Country of the mailing address?\\\\\\"}},\\\\\\"ssn\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"U.S taxpayer identification number(SSN or ITIN)\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":9,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"U.S taxpayer identification number(SSN or ITIN), if required (see instructions)\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the U.S taxpayer identification number(SSN or ITIN)?\\\\\\"}},\\\\\\"foreignTaxID\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Foreign tax identifying number (see instructions)\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":10,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Foreign tax identifying number (see instructions)\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Foreign tax identifying number?\\\\\\"}},\\\\\\"checkFTIN\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Check if FTIN not legally required\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"boolean\\\\\\",\\\\\\"order\\\\\\":10,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Check if FTIN not legally required\\\\\\"}},\\\\\\"referenceNumber\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Reference number(s) (see instructions)\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":11,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Reference number(s)\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Reference number(s)?\\\\\\"}},\\\\\\"dateOfBirth\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Date of birth (see instructions)\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":12,\\\\\\"formatType\\\\\\":\\\\\\"date\\\\\\",\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Date of birth\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Date of birth?\\\\\\"}}},\\\\\\"required\\\\\\":[\\\\\\"name\\\\\\",\\\\\\"countryOfCitizenship\\\\\\",\\\\\\"address\\\\\\",\\\\\\"city\\\\\\",\\\\\\"residenceAddressCountry\\\\\\",\\\\\\"ssn\\\\\\",\\\\\\"foreignTaxID\\\\\\",\\\\\\"referenceNumber\\\\\\",\\\\\\"dateOfBirth\\\\\\"]},\\\\\\"part2\\\\\\":{\\\\\\"typeOf\\\\\\":\\\\\\"object\\\\\\",\\\\\\"order\\\\\\":2,\\\\\\"properties\\\\\\":{\\\\\\"beneficialOwnerResident\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"I certify that the beneficial owner is a resident of\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":1,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"I certify that the beneficial owner is a resident of\\\\\\"}},\\\\\\"specialRatesConditions\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"The beneficial owner is claiming the provisions of Article and paragraph\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":2,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"The beneficial owner is claiming the provisions of Article and paragraph\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"Which country is the beneficial owner a resident of?\\\\\\"}},\\\\\\"specialRatesPercent\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"of the treaty identified on line 9 above to claim a\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":3,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"of the treaty identified on line 9 above to claim a\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"Which provisions of Article and paragraph is the beneficial owner claiming?\\\\\\"}},\\\\\\"specialRatesTypeOfIncome\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"% rate of withholding on (specify type of income)\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"integer\\\\\\",\\\\\\"order\\\\\\":4,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"% rate of withholding on (specify type of income)\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What % rate is the beneficial owner withholding?\\\\\\"}},\\\\\\"specialRatesAdditionalConditions\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Explain the additional conditions in the Article and paragraph the beneficial owner meets to be eligible for the rate of withholding\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":5,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Explain the additional conditions in the Article and paragraph the beneficial owner meets to be eligible for the rate of withholding\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What additional conditions in the Article and paragraph is the beneficial owner eligible for?\\\\\\"}}}}},\\\\\\"required\\\\\\":[\\\\\\"part1\\\\\\"]}}\\",\\"headers\\":{\\"x-username\\":\\"system\\"}}"},"physicalResourceId":{"id":"CreateDefaultSchemaW-8BEN"},"outputPaths":["status"]}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": {
          "Fn::Join": [
            "",
            [
              "{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "SourceStackSourceApiCreateFormSchema16DF88BC",
                  "Arn",
                ],
              },
              "","Payload":"{\\"pathParameters\\":{},\\"queryStringParameters\\":{},\\"multiValueQueryStringParameters\\":{},\\"body\\":\\"{\\\\\\"title\\\\\\":\\\\\\"W-8BEN\\\\\\",\\\\\\"schema\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"W-8BEN\\\\\\",\\\\\\"description\\\\\\":\\\\\\"The W-8 form is a legal US Treasury document required by the Internal Revenue Service (IRS) that allows foreign investors to claim concessional tax treaty benefits, including a reduced rate of withholding tax\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"object\\\\\\",\\\\\\"properties\\\\\\":{\\\\\\"part1\\\\\\":{\\\\\\"typeOf\\\\\\":\\\\\\"object\\\\\\",\\\\\\"order\\\\\\":1,\\\\\\"properties\\\\\\":{\\\\\\"name\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Name of individual who is the beneficial owner\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":1,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Name of individual who is the beneficial owner\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Name of individual who is the beneficial owner?\\\\\\"}},\\\\\\"countryOfCitizenship\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Country of citizenship\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":2,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Country of citizenship\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Country of citizenship?\\\\\\"}},\\\\\\"address\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Permanent residence address\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":3,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Permanent residence address\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Permanent residence address?\\\\\\"}},\\\\\\"city\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"City or town, state or province. Include postal code where appropriate.\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":4,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"City or town, state or province. Include postal code where appropriate.\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the City or town, state or province below the permanent residence address?\\\\\\"}},\\\\\\"residenceAddressCountry\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Country\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":5,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Country\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the residence address country?\\\\\\"}},\\\\\\"mailingAddress\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Mailing address\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":6,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Mailing address (if different from above)\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Mailing address?\\\\\\"}},\\\\\\"mailingAddressCity\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"City or town, state or province. Include postal code where appropriate.\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":7,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"City or town, state or province. Include postal code where appropriate.\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the City or town, state or province below the mailing address?\\\\\\"}},\\\\\\"mailingAddressCountry\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Country\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":8,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Country\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Country of the mailing address?\\\\\\"}},\\\\\\"ssn\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"U.S taxpayer identification number(SSN or ITIN)\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":9,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"U.S taxpayer identification number(SSN or ITIN), if required (see instructions)\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the U.S taxpayer identification number(SSN or ITIN)?\\\\\\"}},\\\\\\"foreignTaxID\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Foreign tax identifying number (see instructions)\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":10,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Foreign tax identifying number (see instructions)\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Foreign tax identifying number?\\\\\\"}},\\\\\\"checkFTIN\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Check if FTIN not legally required\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"boolean\\\\\\",\\\\\\"order\\\\\\":10,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Check if FTIN not legally required\\\\\\"}},\\\\\\"referenceNumber\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Reference number(s) (see instructions)\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":11,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Reference number(s)\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Reference number(s)?\\\\\\"}},\\\\\\"dateOfBirth\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Date of birth (see instructions)\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":12,\\\\\\"formatType\\\\\\":\\\\\\"date\\\\\\",\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Date of birth\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What is the Date of birth?\\\\\\"}}},\\\\\\"required\\\\\\":[\\\\\\"name\\\\\\",\\\\\\"countryOfCitizenship\\\\\\",\\\\\\"address\\\\\\",\\\\\\"city\\\\\\",\\\\\\"residenceAddressCountry\\\\\\",\\\\\\"ssn\\\\\\",\\\\\\"foreignTaxID\\\\\\",\\\\\\"referenceNumber\\\\\\",\\\\\\"dateOfBirth\\\\\\"]},\\\\\\"part2\\\\\\":{\\\\\\"typeOf\\\\\\":\\\\\\"object\\\\\\",\\\\\\"order\\\\\\":2,\\\\\\"properties\\\\\\":{\\\\\\"beneficialOwnerResident\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"I certify that the beneficial owner is a resident of\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":1,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"I certify that the beneficial owner is a resident of\\\\\\"}},\\\\\\"specialRatesConditions\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"The beneficial owner is claiming the provisions of Article and paragraph\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":2,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"The beneficial owner is claiming the provisions of Article and paragraph\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"Which country is the beneficial owner a resident of?\\\\\\"}},\\\\\\"specialRatesPercent\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"of the treaty identified on line 9 above to claim a\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":3,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"of the treaty identified on line 9 above to claim a\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"Which provisions of Article and paragraph is the beneficial owner claiming?\\\\\\"}},\\\\\\"specialRatesTypeOfIncome\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"% rate of withholding on (specify type of income)\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"integer\\\\\\",\\\\\\"order\\\\\\":4,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"% rate of withholding on (specify type of income)\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What % rate is the beneficial owner withholding?\\\\\\"}},\\\\\\"specialRatesAdditionalConditions\\\\\\":{\\\\\\"title\\\\\\":\\\\\\"Explain the additional conditions in the Article and paragraph the beneficial owner meets to be eligible for the rate of withholding\\\\\\",\\\\\\"typeOf\\\\\\":\\\\\\"string\\\\\\",\\\\\\"order\\\\\\":5,\\\\\\"extractionMetadata\\\\\\":{\\\\\\"formKey\\\\\\":\\\\\\"Explain the additional conditions in the Article and paragraph the beneficial owner meets to be eligible for the rate of withholding\\\\\\",\\\\\\"textractQuery\\\\\\":\\\\\\"What additional conditions in the Article and paragraph is the beneficial owner eligible for?\\\\\\"}}}}},\\\\\\"required\\\\\\":[\\\\\\"part1\\\\\\"]}}\\",\\"headers\\":{\\"x-username\\":\\"system\\"}}"},"physicalResourceId":{"id":"CreateDefaultSchemaW-8BEN"},"outputPaths":["status"]}",
            ],
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "SourceStackPopulateDefaultDatadefaultSchemaW8BENCustomResourcePolicyA31E984A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackPopulateDefaultDatadefaultSchemaW8BENCustomResourcePolicyA31E984A",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiAccessLogs97184F6A": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "SourceStackSourceApiAccountC1E9F812": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "SourceStackSourceApiF90F7A80",
        "SourceStackSourceApiPrepareSpecCustomResourceC0823687",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "SourceStackSourceApiCloudWatchRole7FBC5C07",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "SourceStackSourceApiApiAclWebACL0DF2B35F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "test--Api-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "test--Api-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "test--Api-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "SourceStackSourceApiApiAclWebACLAssociation07884335": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/stages/",
              {
                "Ref": "SourceStackSourceApiDeploymentStageprod154CA529",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "SourceStackSourceApiApiAclWebACL0DF2B35F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "SourceStackSourceApiCloudWatchRole7FBC5C07": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "SourceStackSourceApiPrepareSpecCustomResourceC0823687",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "SourceStackSourceApiCreateFormReviewWorkflowTag5161D9DF": {
      "DependsOn": [
        "SourceStackSourceApiCreateFormReviewWorkflowTagServiceRoleDefaultPolicyF5D74555",
        "SourceStackSourceApiCreateFormReviewWorkflowTagServiceRole5DA74770",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.create_form_review_workflow_tag.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiCreateFormReviewWorkflowTagServiceRole5DA74770",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiCreateFormReviewWorkflowTagServiceRole5DA74770": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiCreateFormReviewWorkflowTagServiceRoleDefaultPolicyF5D74555": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormReviewWorkflowTagsE18CFD48",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiCreateFormReviewWorkflowTagServiceRoleDefaultPolicyF5D74555",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiCreateFormReviewWorkflowTagServiceRole5DA74770",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiCreateFormSchema16DF88BC": {
      "DependsOn": [
        "SourceStackSourceApiCreateFormSchemaServiceRoleDefaultPolicyA6721C85",
        "SourceStackSourceApiCreateFormSchemaServiceRoleD52CC761",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.create_form_schema.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiCreateFormSchemaServiceRoleD52CC761",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiCreateFormSchemaServiceRoleD52CC761": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiCreateFormSchemaServiceRoleDefaultPolicyA6721C85": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormSchemasD034C24F",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiCreateFormSchemaServiceRoleDefaultPolicyA6721C85",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiCreateFormSchemaServiceRoleD52CC761",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiDeleteFormSchemaF56EE373": {
      "DependsOn": [
        "SourceStackSourceApiDeleteFormSchemaServiceRoleDefaultPolicy3253A10D",
        "SourceStackSourceApiDeleteFormSchemaServiceRole0CA6FEFB",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.delete_form_schema.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiDeleteFormSchemaServiceRole0CA6FEFB",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiDeleteFormSchemaServiceRole0CA6FEFB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiDeleteFormSchemaServiceRoleDefaultPolicy3253A10D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormSchemasD034C24F",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiDeleteFormSchemaServiceRoleDefaultPolicy3253A10D",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiDeleteFormSchemaServiceRole0CA6FEFB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiDeployment3B7D783F5034dc1ed8b1e8ce9a79d9a03e785d4c": {
      "DependsOn": [
        "SourceStackSourceApiPrepareSpecCustomResourceC0823687",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "SourceStackSourceApiF90F7A80",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "SourceStackSourceApiDeploymentStageprod154CA529": {
      "DependsOn": [
        "SourceStackSourceApiAccountC1E9F812",
        "SourceStackSourceApiPrepareSpecCustomResourceC0823687",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "SourceStackSourceApiAccessLogs97184F6A",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "SourceStackSourceApiDeployment3B7D783F5034dc1ed8b1e8ce9a79d9a03e785d4c",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "SourceStackSourceApiF90F7A80",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "SourceStackSourceApiF90F7A80": {
      "DependsOn": [
        "SourceStackSourceApiPrepareSpecCustomResourceC0823687",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "SourceStackSourceApiPrepareSpecCustomResourceC0823687",
              "outputSpecKey",
            ],
          },
        },
        "Name": "Api",
        "Policy": {
          "Statement": [
            {
              "Action": "execute-api:Invoke",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "execute-api:/*",
            },
            {
              "Action": "execute-api:Invoke",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*",
              },
              "Resource": "execute-api:/*/OPTIONS/*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "SourceStackSourceApiGetDocumentFB327798": {
      "DependsOn": [
        "SourceStackSourceApiGetDocumentServiceRoleDefaultPolicy4A1AF0D2",
        "SourceStackSourceApiGetDocumentServiceRoleE275D87A",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.get_document.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiGetDocumentServiceRoleE275D87A",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiGetDocumentForm5446CBB7": {
      "DependsOn": [
        "SourceStackSourceApiGetDocumentFormServiceRoleDefaultPolicy7CD2BDE9",
        "SourceStackSourceApiGetDocumentFormServiceRole2B5A0F18",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.get_document_form.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiGetDocumentFormServiceRole2B5A0F18",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiGetDocumentFormServiceRole2B5A0F18": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiGetDocumentFormServiceRoleDefaultPolicy7CD2BDE9": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormMetadata01CCFF0B",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackSourceDocumentBucket6F09666C",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackSourceDocumentBucket6F09666C",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiGetDocumentFormServiceRoleDefaultPolicy7CD2BDE9",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiGetDocumentFormServiceRole2B5A0F18",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiGetDocumentServiceRoleDefaultPolicy4A1AF0D2": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentMetadataBB065190",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackSourceDocumentBucket6F09666C",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackSourceDocumentBucket6F09666C",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiGetDocumentServiceRoleDefaultPolicy4A1AF0D2",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiGetDocumentServiceRoleE275D87A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiGetDocumentServiceRoleE275D87A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiGetDocumentUploadUrl68005204": {
      "DependsOn": [
        "SourceStackSourceApiGetDocumentUploadUrlServiceRoleDefaultPolicy278EDDFE",
        "SourceStackSourceApiGetDocumentUploadUrlServiceRole6B622142",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.get_document_upload_url.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiGetDocumentUploadUrlServiceRole6B622142",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiGetDocumentUploadUrlServiceRole6B622142": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiGetDocumentUploadUrlServiceRoleDefaultPolicy278EDDFE": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackSourceDocumentBucket6F09666C",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackSourceDocumentBucket6F09666C",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiGetDocumentUploadUrlServiceRoleDefaultPolicy278EDDFE",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiGetDocumentUploadUrlServiceRole6B622142",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiGetFormSchema6DE00127": {
      "DependsOn": [
        "SourceStackSourceApiGetFormSchemaServiceRoleDefaultPolicy2E15A833",
        "SourceStackSourceApiGetFormSchemaServiceRole50E263CF",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.get_form_schema.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiGetFormSchemaServiceRole50E263CF",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiGetFormSchemaServiceRole50E263CF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiGetFormSchemaServiceRoleDefaultPolicy2E15A833": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormSchemasD034C24F",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiGetFormSchemaServiceRoleDefaultPolicy2E15A833",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiGetFormSchemaServiceRole50E263CF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiGetMetrics1DF34365": {
      "DependsOn": [
        "SourceStackSourceApiGetMetricsServiceRoleDefaultPolicy6BE73588",
        "SourceStackSourceApiGetMetricsServiceRole425D743A",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.get_metrics.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiGetMetricsServiceRole425D743A",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiGetMetricsServiceRole425D743A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiGetMetricsServiceRoleDefaultPolicy6BE73588": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormSchemasD034C24F",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "cloudwatch:GetMetricStatistics",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiGetMetricsServiceRoleDefaultPolicy6BE73588",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiGetMetricsServiceRole425D743A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiLambdaPermissioncreateFormReviewWorkflowTagDE29F067": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiCreateFormReviewWorkflowTag5161D9DF",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/POST/tags",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissioncreateFormSchema8048B42C": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiCreateFormSchema16DF88BC",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/POST/schemas",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissiondeleteFormSchema4D1466CA": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiDeleteFormSchemaF56EE373",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/DELETE/schemas/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissiongetDocumentD791807B": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiGetDocumentFB327798",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/GET/documents/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissiongetDocumentFormDB8CC3A1": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiGetDocumentForm5446CBB7",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/GET/documents/*/forms/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissiongetDocumentUploadUrl38A54844": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiGetDocumentUploadUrl68005204",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/GET/documents/upload-url",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissiongetFormSchema281B987E": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiGetFormSchema6DE00127",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/GET/schemas/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissiongetMetrics37BEC720": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiGetMetrics1DF34365",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/GET/metrics",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissionlistDocumentForms2A94288F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiListDocumentForms879AEC6C",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/GET/documents/*/forms",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissionlistDocumentsB5922C3E": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiListDocumentsB1925691",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/GET/documents",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissionlistFormReviewWorkflowTagsCA0F4B92": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApilistFormReviewWorkflowTagsE220D4AC",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/GET/tags",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissionlistFormSchemasC0433AB7": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiListFormSchemas370D6E68",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/GET/schemas",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissionlistFormsA670FBBC": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiListForms87EB7489",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/GET/forms",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissionsubmitSourceDocument4CF78261": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiSubmitSourceDocument617DF8EE",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/POST/sources/document",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissionupdateFormReview04923F35": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiUpdateFormReview13E31A7F",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/PUT/documents/*/forms/*/review",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissionupdateFormSchema86F5CB86": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiUpdateFormSchema5806484A",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/PUT/schemas/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiLambdaPermissionupdateStatus4227FE7F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SourceStackSourceApiUpdateStatusFC157E58",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "SourceStackSourceApiF90F7A80",
              },
              "/*/PUT/documents/*/forms/*/status",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SourceStackSourceApiListDocumentForms879AEC6C": {
      "DependsOn": [
        "SourceStackSourceApiListDocumentFormsServiceRoleDefaultPolicy741F222F",
        "SourceStackSourceApiListDocumentFormsServiceRoleB5D38999",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.list_document_forms.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiListDocumentFormsServiceRoleB5D38999",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiListDocumentFormsServiceRoleB5D38999": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiListDocumentFormsServiceRoleDefaultPolicy741F222F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentMetadataBB065190",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormMetadata01CCFF0B",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiListDocumentFormsServiceRoleDefaultPolicy741F222F",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiListDocumentFormsServiceRoleB5D38999",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiListDocumentsB1925691": {
      "DependsOn": [
        "SourceStackSourceApiListDocumentsServiceRoleDefaultPolicyDECCB34E",
        "SourceStackSourceApiListDocumentsServiceRole7220ABD9",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.list_documents.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiListDocumentsServiceRole7220ABD9",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiListDocumentsServiceRole7220ABD9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiListDocumentsServiceRoleDefaultPolicyDECCB34E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentMetadataBB065190",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiListDocumentsServiceRoleDefaultPolicyDECCB34E",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiListDocumentsServiceRole7220ABD9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiListFormSchemas370D6E68": {
      "DependsOn": [
        "SourceStackSourceApiListFormSchemasServiceRoleDefaultPolicy5B48CAFA",
        "SourceStackSourceApiListFormSchemasServiceRole016AB9A4",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.list_form_schemas.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiListFormSchemasServiceRole016AB9A4",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiListFormSchemasServiceRole016AB9A4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiListFormSchemasServiceRoleDefaultPolicy5B48CAFA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormSchemasD034C24F",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiListFormSchemasServiceRoleDefaultPolicy5B48CAFA",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiListFormSchemasServiceRole016AB9A4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiListForms87EB7489": {
      "DependsOn": [
        "SourceStackSourceApiListFormsServiceRoleDefaultPolicyAC55699E",
        "SourceStackSourceApiListFormsServiceRole47FFF18C",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.list_forms.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiListFormsServiceRole47FFF18C",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiListFormsServiceRole47FFF18C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiListFormsServiceRoleDefaultPolicyAC55699E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormMetadata01CCFF0B",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiListFormsServiceRoleDefaultPolicyAC55699E",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiListFormsServiceRole47FFF18C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiPrepareSpecCustomResourceC0823687": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SourceStackSourceApiPrepareSpecProviderframeworkonEvent92614BB8",
            "Arn",
          ],
        },
        "corsOptions": {
          "allowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "x-username",
            "x-amz-content-sha256",
            "x-filename",
          ],
          "allowMethods": [
            "OPTIONS",
            "GET",
            "PUT",
            "POST",
            "DELETE",
            "PATCH",
            "HEAD",
          ],
          "allowOrigins": [
            "*",
          ],
          "statusCode": 204,
        },
        "defaultAuthorizerReference": {
          "authorizerId": "aws.auth.sigv4",
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "eaab426750bd72072f16b8e1b8c62dacf874b210bf8f1031d68df0d600ed02ab.json",
        },
        "integrations": {
          "createFormReviewWorkflowTag": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiCreateFormReviewWorkflowTag5161D9DF",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "createFormSchema": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiCreateFormSchema16DF88BC",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "deleteFormSchema": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiDeleteFormSchemaF56EE373",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "getDocument": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiGetDocumentFB327798",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "getDocumentForm": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiGetDocumentForm5446CBB7",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "getDocumentUploadUrl": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiGetDocumentUploadUrl68005204",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "getFormSchema": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiGetFormSchema6DE00127",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "getMetrics": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiGetMetrics1DF34365",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "listDocumentForms": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiListDocumentForms879AEC6C",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "listDocuments": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiListDocumentsB1925691",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "listFormReviewWorkflowTags": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApilistFormReviewWorkflowTagsE220D4AC",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "listFormSchemas": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiListFormSchemas370D6E68",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "listForms": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiListForms87EB7489",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "submitSourceDocument": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiSubmitSourceDocument617DF8EE",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "updateFormReview": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiUpdateFormReview13E31A7F",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "updateFormSchema": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiUpdateFormSchema5806484A",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "updateStatus": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SourceStackSourceApiUpdateStatusFC157E58",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "createFormReviewWorkflowTag": {
            "contentTypes": [
              "application/json",
            ],
            "method": "POST",
            "path": "/tags",
          },
          "createFormSchema": {
            "contentTypes": [
              "application/json",
            ],
            "method": "POST",
            "path": "/schemas",
          },
          "deleteFormSchema": {
            "contentTypes": [
              "application/json",
            ],
            "method": "DELETE",
            "path": "/schemas/{schemaId}",
          },
          "getDocument": {
            "contentTypes": [
              "application/json",
            ],
            "method": "GET",
            "path": "/documents/{documentId}",
          },
          "getDocumentForm": {
            "contentTypes": [
              "application/json",
            ],
            "method": "GET",
            "path": "/documents/{documentId}/forms/{formId}",
          },
          "getDocumentUploadUrl": {
            "contentTypes": [
              "application/json",
            ],
            "method": "GET",
            "path": "/documents/upload-url",
          },
          "getFormSchema": {
            "contentTypes": [
              "application/json",
            ],
            "method": "GET",
            "path": "/schemas/{schemaId}",
          },
          "getMetrics": {
            "contentTypes": [
              "application/json",
            ],
            "method": "GET",
            "path": "/metrics",
          },
          "listDocumentForms": {
            "contentTypes": [
              "application/json",
            ],
            "method": "GET",
            "path": "/documents/{documentId}/forms",
          },
          "listDocuments": {
            "contentTypes": [
              "application/json",
            ],
            "method": "GET",
            "path": "/documents",
          },
          "listFormReviewWorkflowTags": {
            "contentTypes": [
              "application/json",
            ],
            "method": "GET",
            "path": "/tags",
          },
          "listFormSchemas": {
            "contentTypes": [
              "application/json",
            ],
            "method": "GET",
            "path": "/schemas",
          },
          "listForms": {
            "contentTypes": [
              "application/json",
            ],
            "method": "GET",
            "path": "/forms",
          },
          "submitSourceDocument": {
            "contentTypes": [
              "application/json",
            ],
            "method": "POST",
            "path": "/sources/document",
          },
          "updateFormReview": {
            "contentTypes": [
              "application/json",
            ],
            "method": "PUT",
            "path": "/documents/{documentId}/forms/{formId}/review",
          },
          "updateFormSchema": {
            "contentTypes": [
              "application/json",
            ],
            "method": "PUT",
            "path": "/schemas/{schemaId}",
          },
          "updateStatus": {
            "contentTypes": [
              "application/json",
            ],
            "method": "PUT",
            "path": "/documents/{documentId}/forms/{formId}/status",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "eaab426750bd72072f16b8e1b8c62dacf874b210bf8f1031d68df0d600ed02ab.json-prepared",
        },
        "securitySchemes": {
          "aws.auth.sigv4": {
            "in": "header",
            "name": "Authorization",
            "type": "apiKey",
            "x-amazon-apigateway-authtype": "awsSigv4",
          },
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "SourceStackSourceApiPrepareSpecHandler2C447D53": {
      "DependsOn": [
        "SourceStackSourceApiPrepareSpecRole555C9EF9",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "25fbc93f5fc99cc670c29b507d74025b045112180cb5bb318363d22816ce8ef2.zip",
        },
        "FunctionName": "test-051F5D03PrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiPrepareSpecRole555C9EF9",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiPrepareSpecProviderRole3B88E558": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/test-051F5D03PrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/test-051F5D03PrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiPrepareSpecProviderRoleDefaultPolicyCE3F7E96": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackSourceApiPrepareSpecHandler2C447D53",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackSourceApiPrepareSpecHandler2C447D53",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiPrepareSpecProviderRoleDefaultPolicyCE3F7E96",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiPrepareSpecProviderRole3B88E558",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiPrepareSpecProviderframeworkonEvent92614BB8": {
      "DependsOn": [
        "SourceStackSourceApiPrepareSpecProviderRoleDefaultPolicyCE3F7E96",
        "SourceStackSourceApiPrepareSpecProviderRole3B88E558",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (test/SourceStack/SourceApi/Api/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "SourceStackSourceApiPrepareSpecHandler2C447D53",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "test-051F5D03PrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiPrepareSpecProviderRole3B88E558",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiPrepareSpecRole555C9EF9": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/test-051F5D03PrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/eaab426750bd72072f16b8e1b8c62dacf874b210bf8f1031d68df0d600ed02ab.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/test-051F5D03PrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/eaab426750bd72072f16b8e1b8c62dacf874b210bf8f1031d68df0d600ed02ab.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/test-051F5D03PrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/test-051F5D03PrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/eaab426750bd72072f16b8e1b8c62dacf874b210bf8f1031d68df0d600ed02ab.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/eaab426750bd72072f16b8e1b8c62dacf874b210bf8f1031d68df0d600ed02ab.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiSubmitSourceDocument617DF8EE": {
      "DependsOn": [
        "SourceStackSourceApiSubmitSourceDocumentServiceRoleDefaultPolicyCA113845",
        "SourceStackSourceApiSubmitSourceDocumentServiceRoleF8AAECE3",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.submit_source_document.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiSubmitSourceDocumentServiceRoleF8AAECE3",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiSubmitSourceDocumentServiceRoleDefaultPolicyCA113845": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackSourceDocumentBucket6F09666C",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackSourceDocumentBucket6F09666C",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
              },
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentMetadataBB065190",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiSubmitSourceDocumentServiceRoleDefaultPolicyCA113845",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiSubmitSourceDocumentServiceRoleF8AAECE3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiSubmitSourceDocumentServiceRoleF8AAECE3": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiUpdateFormReview13E31A7F": {
      "DependsOn": [
        "SourceStackSourceApiUpdateFormReviewServiceRoleDefaultPolicy1C5F0E50",
        "SourceStackSourceApiUpdateFormReviewServiceRoleCE53CCAF",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.update_form_review.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiUpdateFormReviewServiceRoleCE53CCAF",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiUpdateFormReviewServiceRoleCE53CCAF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiUpdateFormReviewServiceRoleDefaultPolicy1C5F0E50": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormMetadata01CCFF0B",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiUpdateFormReviewServiceRoleDefaultPolicy1C5F0E50",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiUpdateFormReviewServiceRoleCE53CCAF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiUpdateFormSchema5806484A": {
      "DependsOn": [
        "SourceStackSourceApiUpdateFormSchemaServiceRoleDefaultPolicy99B04126",
        "SourceStackSourceApiUpdateFormSchemaServiceRoleDE787FFD",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.update_form_schema.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiUpdateFormSchemaServiceRoleDE787FFD",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiUpdateFormSchemaServiceRoleDE787FFD": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiUpdateFormSchemaServiceRoleDefaultPolicy99B04126": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormSchemasD034C24F",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiUpdateFormSchemaServiceRoleDefaultPolicy99B04126",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiUpdateFormSchemaServiceRoleDE787FFD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApiUpdateStatusFC157E58": {
      "DependsOn": [
        "SourceStackSourceApiUpdateStatusServiceRoleDefaultPolicyA8D72563",
        "SourceStackSourceApiUpdateStatusServiceRole03762CD5",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.update_status.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApiUpdateStatusServiceRole03762CD5",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApiUpdateStatusServiceRole03762CD5": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApiUpdateStatusServiceRoleDefaultPolicyA8D72563": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormMetadata01CCFF0B",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackDocumentMetadataBB065190",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "aws/disclosure-data-extraction",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApiUpdateStatusServiceRoleDefaultPolicyA8D72563",
        "Roles": [
          {
            "Ref": "SourceStackSourceApiUpdateStatusServiceRole03762CD5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceApilistFormReviewWorkflowTagsE220D4AC": {
      "DependsOn": [
        "SourceStackSourceApilistFormReviewWorkflowTagsServiceRoleDefaultPolicyA3B3F767",
        "SourceStackSourceApilistFormReviewWorkflowTagsServiceRole664F14AA",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c802fb0c50f9e37a1cd95a212761356b5ec2e8912d5838f34e447e0ec1858c56.zip",
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_INGESTION_STATE_MACHINE_ARN": {
              "Ref": "SourceStackDocumentIngestionStateMachineDD233ACB",
            },
            "DOCUMENT_METADATA_TABLE_NAME": {
              "Ref": "SourceStackDocumentMetadataBB065190",
            },
            "FORM_METADATA_TABLE_NAME": {
              "Ref": "SourceStackFormMetadata01CCFF0B",
            },
            "FORM_REVIEW_WORKFLOW_TAGS_TABLE_NAME": {
              "Ref": "SourceStackFormReviewWorkflowTagsE18CFD48",
            },
            "FORM_SCHEMA_TABLE_NAME": {
              "Ref": "SourceStackFormSchemasD034C24F",
            },
            "SOURCE_DOCUMENT_BUCKET": {
              "Ref": "SourceStackSourceDocumentBucket6F09666C",
            },
          },
        },
        "Handler": "aws_document_extraction_platform_api_python_handlers.list_form_review_workflow_tags.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "SourceStackSourceApilistFormReviewWorkflowTagsServiceRole664F14AA",
            "Arn",
          ],
        },
        "Runtime": "python3.11",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SourceStackSourceApilistFormReviewWorkflowTagsServiceRole664F14AA": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SourceStackSourceApilistFormReviewWorkflowTagsServiceRoleDefaultPolicyA3B3F767": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cognito-idp:ListUsers",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "AuthStackUserPool06B5763F",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackFormReviewWorkflowTagsE18CFD48",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SourceStackSourceApilistFormReviewWorkflowTagsServiceRoleDefaultPolicyA3B3F767",
        "Roles": [
          {
            "Ref": "SourceStackSourceApilistFormReviewWorkflowTagsServiceRole664F14AA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SourceStackSourceDocumentBucket6F09666C": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*",
              ],
              "AllowedMethods": [
                "PUT",
                "GET",
                "POST",
              ],
              "AllowedOrigins": [
                "*",
              ],
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "SourceStackSourceDocumentBucketPolicy8C8B11F0": {
      "Properties": {
        "Bucket": {
          "Ref": "SourceStackSourceDocumentBucket6F09666C",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "SourceStackSourceDocumentBucket6F09666C",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "SourceStackSourceDocumentBucket6F09666C",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "WebsiteStackWebsiteAccessLogsBucket2F80CF7F": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "ObjectWriter",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "WebsiteStackWebsiteAccessLogsBucketAutoDeleteObjectsCustomResourceB9464321": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "WebsiteStackWebsiteAccessLogsBucketPolicy3A6D4E1F",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "BucketName": {
          "Ref": "WebsiteStackWebsiteAccessLogsBucket2F80CF7F",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "WebsiteStackWebsiteAccessLogsBucketPolicy3A6D4E1F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "Bucket": {
          "Ref": "WebsiteStackWebsiteAccessLogsBucket2F80CF7F",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebsiteStackWebsiteAccessLogsBucket2F80CF7F",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "WebsiteStackWebsiteAccessLogsBucket2F80CF7F",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebsiteStackWebsiteAccessLogsBucket2F80CF7F",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "WebsiteStackWebsiteAccessLogsBucket2F80CF7F",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "WebsiteStackWebsiteWebsiteBucketD8AC4343",
                      "Arn",
                    ],
                  },
                },
                "StringEquals": {
                  "aws:SourceAccount": {
                    "Ref": "AWS::AccountId",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "logging.s3.amazonaws.com",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "WebsiteStackWebsiteAccessLogsBucket2F80CF7F",
                        "Arn",
                      ],
                    },
                    "/website-access-logs*",
                  ],
                ],
              },
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "WebsiteStackWebsiteDistributionLogBucket9F6FFA0F",
                      "Arn",
                    ],
                  },
                },
                "StringEquals": {
                  "aws:SourceAccount": {
                    "Ref": "AWS::AccountId",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "logging.s3.amazonaws.com",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "WebsiteStackWebsiteAccessLogsBucket2F80CF7F",
                        "Arn",
                      ],
                    },
                    "/distribution-access-logs*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "WebsiteStackWebsiteCloudfrontDistribution88264F46": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-CFR4",
              "reason": "Certificate is not mandatory therefore the Cloudfront certificate will be used.",
            },
            {
              "id": "AwsPrototyping-CloudFrontDistributionHttpsViewerNoOutdatedSSL",
              "reason": "Certificate is not mandatory therefore the Cloudfront certificate will be used.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "DistributionConfig": {
          "CustomErrorResponses": [
            {
              "ErrorCode": 404,
              "ResponseCode": 200,
              "ResponsePagePath": "/index.html",
            },
          ],
          "DefaultCacheBehavior": {
            "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
            "Compress": true,
            "TargetOriginId": "testWebsiteStackWebsiteCloudfrontDistributionOrigin166E67E55",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "DefaultRootObject": "index.html",
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Logging": {
            "Bucket": {
              "Fn::GetAtt": [
                "WebsiteStackWebsiteDistributionLogBucket9F6FFA0F",
                "RegionalDomainName",
              ],
            },
          },
          "Origins": [
            {
              "DomainName": {
                "Fn::GetAtt": [
                  "WebsiteStackWebsiteWebsiteBucketD8AC4343",
                  "RegionalDomainName",
                ],
              },
              "Id": "testWebsiteStackWebsiteCloudfrontDistributionOrigin166E67E55",
              "S3OriginConfig": {
                "OriginAccessIdentity": {
                  "Fn::Join": [
                    "",
                    [
                      "origin-access-identity/cloudfront/",
                      {
                        "Ref": "WebsiteStackWebsiteOriginAccessIdentity63916E7B",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "WebACLId": {
            "Fn::GetAtt": [
              "WebsiteStackWebsiteWebsiteAclCFAclCustomResourceF59EB0DF",
              "WebAclArn",
            ],
          },
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "WebsiteStackWebsiteDistributionLogBucket9F6FFA0F": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "WebsiteStackWebsiteAccessLogsBucket2F80CF7F",
          },
          "LogFilePrefix": "distribution-access-logs",
        },
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "BucketOwnerPreferred",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "WebsiteStackWebsiteDistributionLogBucketAutoDeleteObjectsCustomResourceE6DE837D": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "WebsiteStackWebsiteDistributionLogBucketPolicyC45F4A53",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "BucketName": {
          "Ref": "WebsiteStackWebsiteDistributionLogBucket9F6FFA0F",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "WebsiteStackWebsiteDistributionLogBucketPolicyC45F4A53": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "Bucket": {
          "Ref": "WebsiteStackWebsiteDistributionLogBucket9F6FFA0F",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebsiteStackWebsiteDistributionLogBucket9F6FFA0F",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "WebsiteStackWebsiteDistributionLogBucket9F6FFA0F",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebsiteStackWebsiteDistributionLogBucket9F6FFA0F",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "WebsiteStackWebsiteDistributionLogBucket9F6FFA0F",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "WebsiteStackWebsiteOriginAccessIdentity63916E7B": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "CloudFrontOriginAccessIdentityConfig": {
          "Comment": "Allows CloudFront to reach the bucket",
        },
      },
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    },
    "WebsiteStackWebsiteWebsiteAclCFAclCustomResourceF59EB0DF": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "ID": "test-WebsiteAcl-b74e",
        "MANAGED_RULES": [
          {
            "name": "AWSManagedRulesCommonRuleSet",
            "vendor": "AWS",
          },
        ],
        "ServiceToken": {
          "Fn::GetAtt": [
            "WebsiteStackWebsiteWebsiteAclCloudfrontAclProviderframeworkonEventBB0B617F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "WebsiteStackWebsiteWebsiteAclCloudfrontAclProviderframeworkonEventBB0B617F": {
      "DependsOn": [
        "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclProviderRoleDefaultPolicy88E0BAB8",
        "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclProviderRole34906E40",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (test/WebsiteStack/Website/WebsiteAcl/CloudfrontAclProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclOnEventHandler8DA28F80",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclOnEventHandler8DA28F80",
              },
              "-Provider",
            ],
          ],
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclProviderRole34906E40",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclOnEventHandler8DA28F80": {
      "DependsOn": [
        "WebsiteStackWebsiteWebsiteAclOnEventHandlerRole047F6EDC",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "ec39abcd5967aac37a5eba68c6c0c0ed1aa814e34a727002bb2fed44bfe34739.zip",
        },
        "FunctionName": "test-AclEvent-f6b74e",
        "Handler": "index.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "WebsiteStackWebsiteWebsiteAclOnEventHandlerRole047F6EDC",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclProviderRole34906E40": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/",
                          {
                            "Ref": "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclOnEventHandler8DA28F80",
                          },
                          "-Provider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/",
                          {
                            "Ref": "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclOnEventHandler8DA28F80",
                          },
                          "-Provider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclProviderRoleDefaultPolicy88E0BAB8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclOnEventHandler8DA28F80",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclOnEventHandler8DA28F80",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclProviderRoleDefaultPolicy88E0BAB8",
        "Roles": [
          {
            "Ref": "WebsiteStackWebsiteWebsiteAclCloudfrontWebAclProviderRole34906E40",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WebsiteStackWebsiteWebsiteAclOnEventHandlerRole047F6EDC": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:wafv2:us-east-1:<AWS::AccountId>:global/(.*)$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "WafV2 resources have been scoped down to the ACL/IPSet level, however * is still needed as resource id's are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/test-AclEvent-f6b74e:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:wafv2:us-east-1:<AWS::AccountId>:global/(.*)$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "WafV2 resources have been scoped down to the ACL/IPSet level, however * is still needed as resource id's are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/test-AclEvent-f6b74e:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/test-AclEvent-f6b74e",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/test-AclEvent-f6b74e:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "wafv2:CreateWebACL",
                    "wafv2:DeleteWebACL",
                    "wafv2:UpdateWebACL",
                    "wafv2:GetWebACL",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:wafv2:us-east-1:",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":global/ipset/test-WebsiteAcl-b74e-IPSet/*",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:wafv2:us-east-1:",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":global/webacl/test-WebsiteAcl-b74e/*",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:wafv2:us-east-1:",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":global/managedruleset/*/*",
                        ],
                      ],
                    },
                  ],
                },
                {
                  "Action": [
                    "wafv2:CreateIPSet",
                    "wafv2:DeleteIPSet",
                    "wafv2:UpdateIPSet",
                    "wafv2:GetIPSet",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:wafv2:us-east-1:",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":global/ipset/test-WebsiteAcl-b74e-IPSet/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "wafv2",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "WebsiteStackWebsiteWebsiteBucketAutoDeleteObjectsCustomResourceADC03C61": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "WebsiteStackWebsiteWebsiteBucketPolicyEB15DD3A",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "BucketName": {
          "Ref": "WebsiteStackWebsiteWebsiteBucketD8AC4343",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "WebsiteStackWebsiteWebsiteBucketD8AC4343": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "WebsiteStackWebsiteAccessLogsBucket2F80CF7F",
          },
          "LogFilePrefix": "website-access-logs",
        },
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "BucketOwnerEnforced",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
          {
            "Key": "aws-cdk:cr-owned:32cc0cb8",
            "Value": "true",
          },
        ],
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "WebsiteStackWebsiteWebsiteBucketPolicyEB15DD3A": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "Bucket": {
          "Ref": "WebsiteStackWebsiteWebsiteBucketD8AC4343",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebsiteStackWebsiteWebsiteBucketD8AC4343",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "WebsiteStackWebsiteWebsiteBucketD8AC4343",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebsiteStackWebsiteWebsiteBucketD8AC4343",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "WebsiteStackWebsiteWebsiteBucketD8AC4343",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:ListBucket",
              "Effect": "Allow",
              "Principal": {
                "CanonicalUser": {
                  "Fn::GetAtt": [
                    "WebsiteStackWebsiteOriginAccessIdentity63916E7B",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": {
                "Fn::GetAtt": [
                  "WebsiteStackWebsiteWebsiteBucketD8AC4343",
                  "Arn",
                ],
              },
            },
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": {
                "CanonicalUser": {
                  "Fn::GetAtt": [
                    "WebsiteStackWebsiteOriginAccessIdentity63916E7B",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "WebsiteStackWebsiteWebsiteBucketD8AC4343",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "WebsiteStackWebsiteWebsiteDeploymentAwsCliLayer488459DE": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "3fb6287214999ddeafa7cd0e3e58bc5144c8678bb720f3b5e45e8fd32f333eb3.zip",
        },
        "Description": "/opt/awscli/aws",
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "WebsiteStackWebsiteWebsiteDeploymentCustomResource9D5FC80E": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the BucketDeployment construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Action::s3:.*$/g",
                },
                {
                  "regex": "/^Resource::.*$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "All Policies have been scoped to a Bucket. Given Buckets can contain arbitrary content, wildcard resources with bucket scope are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Buckets can contain arbitrary content, therefore wildcard resources under a bucket are required.",
            },
            {
              "id": "AwsSolutions-S1",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
            {
              "id": "AwsPrototyping-S3BucketLoggingEnabled",
              "reason": "Access Log buckets should not have s3 bucket logging",
            },
          ],
        },
      },
      "Properties": {
        "DestinationBucketName": {
          "Ref": "WebsiteStackWebsiteWebsiteBucketD8AC4343",
        },
        "DistributionId": {
          "Ref": "WebsiteStackWebsiteCloudfrontDistribution88264F46",
        },
        "Prune": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
            "Arn",
          ],
        },
        "SourceBucketNames": [
          {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
        ],
        "SourceMarkers": [
          {},
          {
            "<<marker:0xbaba:0>>": {
              "Ref": "AWS::Region",
            },
            "<<marker:0xbaba:1>>": {
              "Ref": "AuthStackIdentityPool5D039486",
            },
            "<<marker:0xbaba:2>>": {
              "Ref": "AuthStackUserPool06B5763F",
            },
            "<<marker:0xbaba:3>>": {
              "Ref": "AuthStackUserPoolUserPoolClientD4E6241D",
            },
            "<<marker:0xbaba:4>>": {
              "Ref": "SourceStackSourceApiF90F7A80",
            },
            "<<marker:0xbaba:5>>": {
              "Ref": "AWS::Region",
            },
            "<<marker:0xbaba:6>>": {
              "Ref": "AWS::URLSuffix",
            },
            "<<marker:0xbaba:7>>": {
              "Ref": "SourceStackSourceApiDeploymentStageprod154CA529",
            },
          },
        ],
        "SourceObjectKeys": [
          "312ed18da0aa685311766619fbfd960494aa79bbd4d58070faa093c4d02c7b5e.zip",
          "3686a32be83aecec16177ec3642e2e0c0ef593f4892b7a75898b23ea549f4dc7.zip",
        ],
      },
      "Type": "Custom::CDKBucketDeployment",
      "UpdateReplacePolicy": "Delete",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
