// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Api should synthesize 1`] = `
{
  "Outputs": {
    "ApiTestEndpoint34A72375": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiTestEE73F324",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "ApiTestDeploymentStageprod660267A6",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AccessLogs8B620ECA": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestAccount272B5CDD": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestEE73F324",
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiTestCloudWatchRole56ED0814",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestApiTestAclWebACL9E75156F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultAction": {
          "Allow": {},
        },
        "Name": "Default--ApiTest-Acl-WebAcl",
        "Rules": [
          {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": {
              "None": {},
            },
            "Priority": 2,
            "Statement": {
              "ManagedRuleGroupStatement": {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "Default--ApiTest-Acl-WebAcl-AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "Default--ApiTest-Acl-WebAcl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ApiTestApiTestAclWebACLAssociation54801610": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ResourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              "::/restapis/",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/stages/",
              {
                "Ref": "ApiTestDeploymentStageprod660267A6",
              },
            ],
          ],
        },
        "WebACLArn": {
          "Fn::GetAtt": [
            "ApiTestApiTestAclWebACL9E75156F",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ApiTestCloudWatchRole56ED0814": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "ApiTestDeployment153EC47810f24423d8ec65132535663132fb235c": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod660267A6": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "AccessLogs8B620ECA",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "ApiTestDeployment153EC47810f24423d8ec65132535663132fb235c",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "ApiTestEE73F324",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestEE73F324": {
      "DependsOn": [
        "ApiTestPrepareSpecCustomResourceC9800EE6",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "ApiTestPrepareSpecCustomResourceC9800EE6",
              "outputSpecKey",
            ],
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestLambdaPermissioncreateFormReviewWorkflowTag8493EACF": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "createFormReviewWorkflowTagLambdaF851F454",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/POST/tags",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissioncreateFormSchema31A09279": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "createFormSchemaLambda7AD289FC",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/POST/schemas",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiondeleteFormSchema1813622C": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "deleteFormSchemaLambda82A566B0",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/DELETE/schemas/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiongetDocument2B1C76D9": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "getDocumentLambdaD4B182D8",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/documents/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiongetDocumentForm3FB4A5CE": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "getDocumentFormLambdaD7292B95",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/documents/*/forms/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiongetDocumentUploadUrl09A647AA": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "getDocumentUploadUrlLambda18CE0743",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/documents/upload-url",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiongetFormSchema562131EE": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "getFormSchemaLambda797104D8",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/schemas/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiongetMetricsCF13AE28": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "getMetricsLambdaD03F8C6C",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/metrics",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionlistDocumentFormsD28B85A5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "listDocumentFormsLambdaAF0DFC27",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/documents/*/forms",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionlistDocumentsE53DD0B2": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "listDocumentsLambdaA37EF1B8",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/documents",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionlistFormReviewWorkflowTagsE3F0AEF8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "listFormReviewWorkflowTagsLambda1C747356",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/tags",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionlistFormSchemasA7BDA33D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "listFormSchemasLambda3C0EA7FA",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/schemas",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionlistFormsE173C217": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "listFormsLambda04A84401",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/GET/forms",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionsubmitSourceDocument84F01611": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "submitSourceDocumentLambdaA214DCA0",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/POST/sources/document",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionupdateFormReview3284B764": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "updateFormReviewLambdaAA54EE7D",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/PUT/documents/*/forms/*/review",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionupdateFormSchemaA1785553": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "updateFormSchemaLambda69854AA8",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/PUT/schemas/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionupdateStatus3B5E9D8D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "updateStatusLambda7B641729",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "ApiTestEE73F324",
              },
              "/*/PUT/documents/*/forms/*/status",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestPrepareSpecA3536D2B": {
      "DependsOn": [
        "ApiTestPrepareSpecRole44D562E5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "7e0b646807e5ff55e634d8c598d0622db410e8a408794f469d70fe488dfd2381.zip",
        },
        "FunctionName": "Default-PrepareSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecRole44D562E5",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecCustomResourceC9800EE6": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188",
            "Arn",
          ],
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "dbe54b6e48e941fdd1f43344ad458d904744fdd95034bd2ea96b6aa9c2c58d58.json",
        },
        "integrations": {
          "createFormReviewWorkflowTag": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "createFormReviewWorkflowTagLambdaF851F454",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "createFormSchema": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "createFormSchemaLambda7AD289FC",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "deleteFormSchema": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "deleteFormSchemaLambda82A566B0",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "getDocument": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "getDocumentLambdaD4B182D8",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "getDocumentForm": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "getDocumentFormLambdaD7292B95",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "getDocumentUploadUrl": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "getDocumentUploadUrlLambda18CE0743",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "getFormSchema": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "getFormSchemaLambda797104D8",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "getMetrics": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "getMetricsLambdaD03F8C6C",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "listDocumentForms": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "listDocumentFormsLambdaAF0DFC27",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "listDocuments": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "listDocumentsLambdaA37EF1B8",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "listFormReviewWorkflowTags": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "listFormReviewWorkflowTagsLambda1C747356",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "listFormSchemas": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "listFormSchemasLambda3C0EA7FA",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "listForms": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "listFormsLambda04A84401",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "submitSourceDocument": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "submitSourceDocumentLambdaA214DCA0",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "updateFormReview": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "updateFormReviewLambdaAA54EE7D",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "updateFormSchema": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "updateFormSchemaLambda69854AA8",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "updateStatus": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "updateStatusLambda7B641729",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "createFormReviewWorkflowTag": {
            "method": "POST",
            "path": "/tags",
          },
          "createFormSchema": {
            "method": "POST",
            "path": "/schemas",
          },
          "deleteFormSchema": {
            "method": "DELETE",
            "path": "/schemas/{schemaId}",
          },
          "getDocument": {
            "method": "GET",
            "path": "/documents/{documentId}",
          },
          "getDocumentForm": {
            "method": "GET",
            "path": "/documents/{documentId}/forms/{formId}",
          },
          "getDocumentUploadUrl": {
            "method": "GET",
            "path": "/documents/upload-url",
          },
          "getFormSchema": {
            "method": "GET",
            "path": "/schemas/{schemaId}",
          },
          "getMetrics": {
            "method": "GET",
            "path": "/metrics",
          },
          "listDocumentForms": {
            "method": "GET",
            "path": "/documents/{documentId}/forms",
          },
          "listDocuments": {
            "method": "GET",
            "path": "/documents",
          },
          "listFormReviewWorkflowTags": {
            "method": "GET",
            "path": "/tags",
          },
          "listFormSchemas": {
            "method": "GET",
            "path": "/schemas",
          },
          "listForms": {
            "method": "GET",
            "path": "/forms",
          },
          "submitSourceDocument": {
            "method": "POST",
            "path": "/sources/document",
          },
          "updateFormReview": {
            "method": "PUT",
            "path": "/documents/{documentId}/forms/{formId}/review",
          },
          "updateFormSchema": {
            "method": "PUT",
            "path": "/schemas/{schemaId}",
          },
          "updateStatus": {
            "method": "PUT",
            "path": "/documents/{documentId}/forms/{formId}/status",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "dbe54b6e48e941fdd1f43344ad458d904744fdd95034bd2ea96b6aa9c2c58d58.json-prepared",
        },
        "securitySchemes": {},
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ApiTestPrepareSpecA3536D2B",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ApiTestPrepareSpecA3536D2B",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "Roles": [
          {
            "Ref": "ApiTestPrepareSpecProviderRoleF47822B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiTestPrepareSpecProviderRoleF47822B8": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-PrepareSpec-Provider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-PrepareSpec-Provider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestPrepareSpecProviderframeworkonEvent2FA9E188": {
      "DependsOn": [
        "ApiTestPrepareSpecProviderRoleDefaultPolicy99662E78",
        "ApiTestPrepareSpecProviderRoleF47822B8",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e7c95e1a12d903d913ebdd526c735f1ac58b2024882a5562110221fe685ebe85.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (Default/ApiTest/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ApiTestPrepareSpecA3536D2B",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "Default-PrepareSpec-Provider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ApiTestPrepareSpecProviderRoleF47822B8",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ApiTestPrepareSpecRole44D562E5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/Default-PrepareSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-PrepareSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/Default-PrepareSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/dbe54b6e48e941fdd1f43344ad458d904744fdd95034bd2ea96b6aa9c2c58d58.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/dbe54b6e48e941fdd1f43344ad458d904744fdd95034bd2ea96b6aa9c2c58d58.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "createFormReviewWorkflowTagLambdaF851F454": {
      "DependsOn": [
        "createFormReviewWorkflowTagLambdaServiceRole42D71378",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "createFormReviewWorkflowTagLambdaServiceRole42D71378",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "createFormReviewWorkflowTagLambdaServiceRole42D71378": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "createFormSchemaLambda7AD289FC": {
      "DependsOn": [
        "createFormSchemaLambdaServiceRoleC8B1ABCE",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "createFormSchemaLambdaServiceRoleC8B1ABCE",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "createFormSchemaLambdaServiceRoleC8B1ABCE": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "deleteFormSchemaLambda82A566B0": {
      "DependsOn": [
        "deleteFormSchemaLambdaServiceRole34313DB3",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "deleteFormSchemaLambdaServiceRole34313DB3",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "deleteFormSchemaLambdaServiceRole34313DB3": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "getDocumentFormLambdaD7292B95": {
      "DependsOn": [
        "getDocumentFormLambdaServiceRole8383A8DF",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "getDocumentFormLambdaServiceRole8383A8DF",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "getDocumentFormLambdaServiceRole8383A8DF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "getDocumentLambdaD4B182D8": {
      "DependsOn": [
        "getDocumentLambdaServiceRoleC2162A01",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "getDocumentLambdaServiceRoleC2162A01",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "getDocumentLambdaServiceRoleC2162A01": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "getDocumentUploadUrlLambda18CE0743": {
      "DependsOn": [
        "getDocumentUploadUrlLambdaServiceRoleE0A5064A",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "getDocumentUploadUrlLambdaServiceRoleE0A5064A",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "getDocumentUploadUrlLambdaServiceRoleE0A5064A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "getFormSchemaLambda797104D8": {
      "DependsOn": [
        "getFormSchemaLambdaServiceRole86A100D1",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "getFormSchemaLambdaServiceRole86A100D1",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "getFormSchemaLambdaServiceRole86A100D1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "getMetricsLambdaD03F8C6C": {
      "DependsOn": [
        "getMetricsLambdaServiceRole208C4AD4",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "getMetricsLambdaServiceRole208C4AD4",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "getMetricsLambdaServiceRole208C4AD4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "listDocumentFormsLambdaAF0DFC27": {
      "DependsOn": [
        "listDocumentFormsLambdaServiceRole5A51F525",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "listDocumentFormsLambdaServiceRole5A51F525",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "listDocumentFormsLambdaServiceRole5A51F525": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "listDocumentsLambdaA37EF1B8": {
      "DependsOn": [
        "listDocumentsLambdaServiceRole9CC0C0C1",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "listDocumentsLambdaServiceRole9CC0C0C1",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "listDocumentsLambdaServiceRole9CC0C0C1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "listFormReviewWorkflowTagsLambda1C747356": {
      "DependsOn": [
        "listFormReviewWorkflowTagsLambdaServiceRole18713536",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "listFormReviewWorkflowTagsLambdaServiceRole18713536",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "listFormReviewWorkflowTagsLambdaServiceRole18713536": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "listFormSchemasLambda3C0EA7FA": {
      "DependsOn": [
        "listFormSchemasLambdaServiceRole9D85886A",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "listFormSchemasLambdaServiceRole9D85886A",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "listFormSchemasLambdaServiceRole9D85886A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "listFormsLambda04A84401": {
      "DependsOn": [
        "listFormsLambdaServiceRole5E9F0F29",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "listFormsLambdaServiceRole5E9F0F29",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "listFormsLambdaServiceRole5E9F0F29": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "submitSourceDocumentLambdaA214DCA0": {
      "DependsOn": [
        "submitSourceDocumentLambdaServiceRole52F6521B",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "submitSourceDocumentLambdaServiceRole52F6521B",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "submitSourceDocumentLambdaServiceRole52F6521B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "updateFormReviewLambdaAA54EE7D": {
      "DependsOn": [
        "updateFormReviewLambdaServiceRole16D0911E",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "updateFormReviewLambdaServiceRole16D0911E",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "updateFormReviewLambdaServiceRole16D0911E": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "updateFormSchemaLambda69854AA8": {
      "DependsOn": [
        "updateFormSchemaLambdaServiceRoleCB53DF54",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "updateFormSchemaLambdaServiceRoleCB53DF54",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "updateFormSchemaLambdaServiceRoleCB53DF54": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "updateStatusLambda7B641729": {
      "DependsOn": [
        "updateStatusLambdaServiceRoleB3EF2D58",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": {
          "Fn::GetAtt": [
            "updateStatusLambdaServiceRoleB3EF2D58",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "updateStatusLambdaServiceRoleB3EF2D58": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
