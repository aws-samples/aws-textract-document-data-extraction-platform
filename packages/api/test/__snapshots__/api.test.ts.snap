// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Api should synthesize 1`] = `
Object {
  "Outputs": Object {
    "ApiTestEndpointC91A82E8": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "ApiTest0B514494",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "ApiTestDeploymentStageprod77F35FA8",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "ApiTest0B514494": Object {
      "Properties": Object {
        "Body": Object {
          "components": Object {
            "parameters": Object {
              "nextToken": Object {
                "description": "Passed to continue retrieving pages of results",
                "in": "query",
                "name": "nextToken",
                "required": false,
                "schema": Object {
                  "type": "string",
                },
              },
              "pageSize": Object {
                "description": "The number of results to return in a page",
                "in": "query",
                "name": "pageSize",
                "required": true,
                "schema": Object {
                  "type": "integer",
                },
              },
            },
            "schemas": Object {
              "AggregateDocumentMetrics": Object {
                "description": "Aggregated metrics for documents",
                "properties": Object {
                  "averageClassificationTimeMilliseconds": Object {
                    "type": "integer",
                  },
                  "averageClassificationTimePerPageMilliseconds": Object {
                    "type": "integer",
                  },
                  "totalFailedDocumentCount": Object {
                    "type": "integer",
                  },
                  "totalProcessedDocumentCount": Object {
                    "type": "integer",
                  },
                  "totalSuccessfulDocumentCount": Object {
                    "type": "integer",
                  },
                },
                "type": "object",
              },
              "AggregateFormMetrics": Object {
                "description": "Aggregated metrics for forms",
                "properties": Object {
                  "averageConfidence": Object {
                    "type": "number",
                  },
                  "averageEndToEndTimeMilliseconds": Object {
                    "type": "integer",
                  },
                  "averageEndToEndTimePerPageMilliseconds": Object {
                    "type": "integer",
                  },
                  "averageExtractionAccuracyCorrectness": Object {
                    "type": "number",
                  },
                  "averageExtractionAccuracyDistance": Object {
                    "type": "number",
                  },
                  "averageExtractionTimeMilliseconds": Object {
                    "type": "integer",
                  },
                  "averageExtractionTimePerPageMilliseconds": Object {
                    "type": "integer",
                  },
                  "averageProcessingTimeMilliseconds": Object {
                    "type": "integer",
                  },
                  "averageProcessingTimePerPageMilliseconds": Object {
                    "type": "integer",
                  },
                  "averageReviewTimeMilliseconds": Object {
                    "type": "integer",
                  },
                  "averageReviewTimePerPageMilliseconds": Object {
                    "type": "integer",
                  },
                  "averageWaitForReviewTimeMilliseconds": Object {
                    "type": "integer",
                  },
                  "averageWaitForReviewTimePerPageMilliseconds": Object {
                    "type": "integer",
                  },
                  "totalFailedFormCount": Object {
                    "type": "integer",
                  },
                  "totalProcessedFormCount": Object {
                    "type": "integer",
                  },
                  "totalSuccessfulFormCount": Object {
                    "type": "integer",
                  },
                },
                "type": "object",
              },
              "AggregateMetrics": Object {
                "allOf": Array [
                  Object {
                    "$ref": "#/components/schemas/AggregateDocumentMetrics",
                  },
                  Object {
                    "$ref": "#/components/schemas/AggregateFormMetrics",
                  },
                ],
                "description": "Aggregated metrics for disclosure data extraction",
                "properties": Object {
                  "bySchemaId": Object {
                    "additionalProperties": Object {
                      "$ref": "#/components/schemas/AggregateFormMetrics",
                    },
                    "type": "object",
                  },
                },
                "required": Array [
                  "bySchemaId",
                ],
                "type": "object",
              },
              "ApiError": Object {
                "description": "Returned when an error occurs",
                "properties": Object {
                  "message": Object {
                    "type": "string",
                  },
                },
                "required": Array [
                  "message",
                ],
                "type": "object",
              },
              "CreateFormReviewWorkflowTagInput": Object {
                "description": "Describes the input for creating a new form review workflow tag",
                "properties": Object {
                  "tagText": Object {
                    "type": "string",
                  },
                },
                "required": Array [
                  "tagText",
                ],
                "type": "object",
              },
              "CreateUpdateDetails": Object {
                "description": "Metadata about when an item was created/updated",
                "properties": Object {
                  "createdBy": Object {
                    "type": "string",
                  },
                  "createdTimestamp": Object {
                    "type": "string",
                  },
                  "updatedBy": Object {
                    "type": "string",
                  },
                  "updatedTimestamp": Object {
                    "type": "string",
                  },
                },
                "type": "object",
              },
              "DocumentMetadata": Object {
                "allOf": Array [
                  Object {
                    "$ref": "#/components/schemas/CreateUpdateDetails",
                  },
                ],
                "description": "Metadata about a document",
                "properties": Object {
                  "documentId": Object {
                    "type": "string",
                  },
                  "ingestionExecution": Object {
                    "$ref": "#/components/schemas/IngestionExecution",
                  },
                  "location": Object {
                    "$ref": "#/components/schemas/S3Location",
                  },
                  "name": Object {
                    "description": "The name of the document",
                    "type": "string",
                  },
                  "numberOfClassifiedForms": Object {
                    "description": "The number of forms discovered within the document",
                    "type": "integer",
                  },
                  "numberOfPages": Object {
                    "description": "The number of pages in the document, discovered during classification",
                    "type": "integer",
                  },
                  "statusTransitionLog": Object {
                    "description": "A log of status transitions",
                    "items": Object {
                      "$ref": "#/components/schemas/StatusTransition",
                    },
                    "type": "array",
                  },
                  "url": Object {
                    "description": "Presigned url for fetching the document (returned on get individual document only)",
                    "type": "string",
                  },
                },
                "required": Array [
                  "documentId",
                  "name",
                  "location",
                  "statusTransitionLog",
                ],
                "type": "object",
              },
              "ExecutionStatus": Object {
                "enum": Array [
                  "IN_PROGRESS",
                  "SUCCEEDED",
                  "FAILED",
                ],
                "type": "string",
              },
              "ExtractionAccuracy": Object {
                "description": "A collection of measures of the accuracy of data extracted for the form, computed once the form has been reviewed by a human",
                "properties": Object {
                  "fieldCorrectnessPercentage": Object {
                    "description": "The percentage of fields that were not changed during review",
                    "type": "number",
                  },
                  "fieldDistancePercentage": Object {
                    "description": "A percentage based on the Levenshtein Distance between the original extracted values and the human corrected values. Since it computes the minimum number of single-character edits (substitutions, insertions, deletions) required to transform the original to the reviewed, it acts as a measure much like 'how much manual work was required for the review?' See https://en.wikipedia.org/wiki/Levenshtein_distance",
                    "type": "number",
                  },
                },
                "required": Array [
                  "fieldDistancePercentage",
                  "fieldCorrectnessPercentage",
                ],
                "type": "object",
              },
              "ExtractionExecution": Object {
                "description": "Describes the execution of the form data extraction pipeline",
                "properties": Object {
                  "executionId": Object {
                    "type": "string",
                  },
                  "status": Object {
                    "$ref": "#/components/schemas/ExtractionExecutionStatus",
                  },
                  "statusReason": Object {
                    "type": "string",
                  },
                },
                "required": Array [
                  "executionId",
                  "status",
                ],
                "type": "object",
              },
              "ExtractionExecutionStatus": Object {
                "enum": Array [
                  "NOT_STARTED",
                  "IN_PROGRESS",
                  "READY_FOR_REVIEW",
                  "REVIEWING",
                  "REVIEWED",
                  "FAILED",
                ],
                "type": "string",
              },
              "FormFieldExtractionMetadata": Object {
                "description": "Metadata to assist with the extraction of this form field from a document",
                "properties": Object {
                  "columnPosition": Object {
                    "description": "The 1-indexed column number within the table in which this field appears.",
                    "type": "integer",
                  },
                  "formKey": Object {
                    "description": "The literal text uses as the key for this field in a form, eg 'Name of Entity'. Capitalisation should be the same as appears in the form.",
                    "type": "string",
                  },
                  "rowPosition": Object {
                    "description": "The 1-indexed row number within the table in which this field appears",
                    "type": "integer",
                  },
                  "tablePosition": Object {
                    "description": "The 1-indexed table number in which this field appears.",
                    "type": "integer",
                  },
                  "textractQuery": Object {
                    "description": "When specified, try to extract the field using this textract query before falling back to other means",
                    "type": "string",
                  },
                },
                "type": "object",
              },
              "FormJSONSchema": Object {
                "description": "Schema for a json schema for a form, an extended definition of a standard JSON schema. See  See https://github.com/OAI/OpenAPI-Specification/blob/main/schemas/v3.0/schema.yaml",
                "properties": Object {
                  "additionalProperties": Object {
                    "default": true,
                    "type": "boolean",
                  },
                  "allOf": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/FormJSONSchema",
                    },
                    "type": "array",
                  },
                  "anyOf": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/FormJSONSchema",
                    },
                    "type": "array",
                  },
                  "default": Object {},
                  "deprecated": Object {
                    "default": false,
                    "type": "boolean",
                  },
                  "description": Object {
                    "type": "string",
                  },
                  "enum": Object {
                    "items": Object {},
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": false,
                  },
                  "example": Object {},
                  "exclusiveMaximum": Object {
                    "default": false,
                    "type": "boolean",
                  },
                  "exclusiveMinimum": Object {
                    "default": false,
                    "type": "boolean",
                  },
                  "extractionMetadata": Object {
                    "$ref": "#/components/schemas/FormFieldExtractionMetadata",
                  },
                  "formatType": Object {
                    "type": "string",
                  },
                  "items": Object {
                    "$ref": "#/components/schemas/FormJSONSchema",
                  },
                  "maxItems": Object {
                    "minimum": 0,
                    "type": "integer",
                  },
                  "maxLength": Object {
                    "minimum": 0,
                    "type": "integer",
                  },
                  "maxProperties": Object {
                    "minimum": 0,
                    "type": "integer",
                  },
                  "maximum": Object {
                    "type": "number",
                  },
                  "minItems": Object {
                    "default": 0,
                    "minimum": 0,
                    "type": "integer",
                  },
                  "minLength": Object {
                    "default": 0,
                    "minimum": 0,
                    "type": "integer",
                  },
                  "minProperties": Object {
                    "default": 0,
                    "minimum": 0,
                    "type": "integer",
                  },
                  "minimum": Object {
                    "type": "number",
                  },
                  "multipleOf": Object {
                    "exclusiveMinimum": true,
                    "minimum": 0,
                    "type": "number",
                  },
                  "notOf": Object {
                    "$ref": "#/components/schemas/FormJSONSchema",
                  },
                  "nullable": Object {
                    "default": false,
                    "type": "boolean",
                  },
                  "oneOf": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/FormJSONSchema",
                    },
                    "type": "array",
                  },
                  "order": Object {
                    "description": "The relative order of this property (for use in object types)",
                    "type": "integer",
                  },
                  "pattern": Object {
                    "format": "regex",
                    "type": "string",
                  },
                  "properties": Object {
                    "additionalProperties": Object {
                      "$ref": "#/components/schemas/FormJSONSchema",
                    },
                    "type": "object",
                  },
                  "readOnly": Object {
                    "default": false,
                    "type": "boolean",
                  },
                  "required": Object {
                    "items": Object {
                      "type": "string",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                  "title": Object {
                    "type": "string",
                  },
                  "typeOf": Object {
                    "enum": Array [
                      "array",
                      "boolean",
                      "integer",
                      "number",
                      "object",
                      "string",
                    ],
                    "type": "string",
                  },
                  "uniqueItems": Object {
                    "default": false,
                    "type": "boolean",
                  },
                  "writeOnly": Object {
                    "default": false,
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
              "FormMetadata": Object {
                "allOf": Array [
                  Object {
                    "$ref": "#/components/schemas/CreateUpdateDetails",
                  },
                ],
                "description": "Metadata about a form within a document",
                "properties": Object {
                  "averageConfidence": Object {
                    "description": "The average confidence computed by textract for all fields in the form",
                    "type": "number",
                  },
                  "documentId": Object {
                    "type": "string",
                  },
                  "documentName": Object {
                    "type": "string",
                  },
                  "endPageIndex": Object {
                    "type": "integer",
                  },
                  "extractedData": Object {
                    "description": "Data extracted from the form - has any type, will be of the shape of the schema. This can be modified by reviewers who may correct data that has been inaccurately extracted",
                  },
                  "extractedDataMetadata": Object {
                    "description": "Metadata of extracted data values, of same shape as the data above, but leaf values contain confidence and bounding box metadata.",
                  },
                  "extractionAccuracy": Object {
                    "$ref": "#/components/schemas/ExtractionAccuracy",
                  },
                  "extractionExecution": Object {
                    "$ref": "#/components/schemas/ExtractionExecution",
                  },
                  "formId": Object {
                    "type": "string",
                  },
                  "location": Object {
                    "$ref": "#/components/schemas/S3Location",
                  },
                  "notes": Object {
                    "type": "string",
                  },
                  "numberOfPages": Object {
                    "description": "The number of pages in the form",
                    "type": "integer",
                  },
                  "originalExtractedData": Object {
                    "description": "The original data extracted from the form - has any type, will be of the shape of the schema. This is what was originally extracted by the system, prior to any human review.",
                  },
                  "schemaId": Object {
                    "type": "string",
                  },
                  "schemaSnapshot": Object {
                    "$ref": "#/components/schemas/FormJSONSchema",
                  },
                  "startPageIndex": Object {
                    "type": "integer",
                  },
                  "statusTransitionLog": Object {
                    "description": "A log of status transitions",
                    "items": Object {
                      "$ref": "#/components/schemas/StatusTransition",
                    },
                    "type": "array",
                  },
                  "tags": Object {
                    "items": Object {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "textractOutputLocation": Object {
                    "$ref": "#/components/schemas/S3Location",
                  },
                  "url": Object {
                    "description": "Presigned url for fetching the document (returned on get individual form only)",
                    "type": "string",
                  },
                },
                "required": Array [
                  "documentId",
                  "documentName",
                  "formId",
                  "schemaId",
                  "numberOfPages",
                  "startPageIndex",
                  "endPageIndex",
                  "location",
                  "extractionExecution",
                  "schemaSnapshot",
                  "statusTransitionLog",
                ],
                "type": "object",
              },
              "FormReviewWorkflowTag": Object {
                "allOf": Array [
                  Object {
                    "$ref": "#/components/schemas/CreateFormReviewWorkflowTagInput",
                  },
                  Object {
                    "$ref": "#/components/schemas/CreateUpdateDetails",
                  },
                ],
                "description": "Describes the object of a form review workflow tag",
                "properties": Object {
                  "tagId": Object {
                    "type": "string",
                  },
                },
                "required": Array [
                  "tagId",
                ],
                "type": "object",
              },
              "FormSchema": Object {
                "allOf": Array [
                  Object {
                    "$ref": "#/components/schemas/FormSchemaInput",
                  },
                  Object {
                    "$ref": "#/components/schemas/CreateUpdateDetails",
                  },
                ],
                "description": "A schema defining the structured data expected for a form",
                "properties": Object {
                  "schemaId": Object {
                    "type": "string",
                  },
                },
                "required": Array [
                  "schemaId",
                ],
                "type": "object",
              },
              "FormSchemaInput": Object {
                "description": "A schema defining the structured data expected for a form (without an id)",
                "properties": Object {
                  "description": Object {
                    "description": "A description of the form and schema",
                    "type": "string",
                  },
                  "schema": Object {
                    "$ref": "#/components/schemas/FormJSONSchema",
                  },
                  "title": Object {
                    "description": "The title of the form, as it appears in the form, eg 'Appendix 3x'",
                    "type": "string",
                  },
                },
                "required": Array [
                  "title",
                  "schema",
                ],
                "type": "object",
              },
              "GetDocumentUploadUrlResponse": Object {
                "description": "Response to getting a document upload url",
                "properties": Object {
                  "documentId": Object {
                    "type": "string",
                  },
                  "location": Object {
                    "$ref": "#/components/schemas/S3Location",
                  },
                  "url": Object {
                    "type": "string",
                  },
                },
                "required": Array [
                  "documentId",
                  "url",
                  "location",
                ],
                "type": "object",
              },
              "IngestionExecution": Object {
                "description": "Describes the execution of the document ingestion pipeline",
                "properties": Object {
                  "executionId": Object {
                    "type": "string",
                  },
                  "status": Object {
                    "$ref": "#/components/schemas/ExecutionStatus",
                  },
                  "statusReason": Object {
                    "type": "string",
                  },
                },
                "required": Array [
                  "executionId",
                  "status",
                ],
                "type": "object",
              },
              "ListDocumentsResponse": Object {
                "allOf": Array [
                  Object {
                    "$ref": "#/components/schemas/PaginatedResponse",
                  },
                ],
                "description": "A list of documents",
                "properties": Object {
                  "documents": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/DocumentMetadata",
                    },
                    "type": "array",
                  },
                },
                "required": Array [
                  "documents",
                ],
                "type": "object",
              },
              "ListFormReviewWorkflowTagsResponse": Object {
                "allOf": Array [
                  Object {
                    "$ref": "#/components/schemas/PaginatedResponse",
                  },
                ],
                "description": "A list of form review workflow tags",
                "properties": Object {
                  "tags": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/FormReviewWorkflowTag",
                    },
                    "type": "array",
                  },
                },
                "required": Array [
                  "tags",
                ],
                "type": "object",
              },
              "ListFormSchemasResponse": Object {
                "allOf": Array [
                  Object {
                    "$ref": "#/components/schemas/PaginatedResponse",
                  },
                ],
                "description": "A list of form schemas",
                "properties": Object {
                  "schemas": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/FormSchema",
                    },
                    "type": "array",
                  },
                },
                "required": Array [
                  "schemas",
                ],
                "type": "object",
              },
              "ListFormsResponse": Object {
                "allOf": Array [
                  Object {
                    "$ref": "#/components/schemas/PaginatedResponse",
                  },
                ],
                "description": "A list of forms",
                "properties": Object {
                  "forms": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/FormMetadata",
                    },
                    "type": "array",
                  },
                },
                "required": Array [
                  "forms",
                ],
                "type": "object",
              },
              "PaginatedResponse": Object {
                "properties": Object {
                  "nextToken": Object {
                    "type": "string",
                  },
                },
                "type": "object",
              },
              "S3Location": Object {
                "description": "A location in s3",
                "properties": Object {
                  "bucket": Object {
                    "type": "string",
                  },
                  "key": Object {
                    "type": "string",
                  },
                },
                "required": Array [
                  "bucket",
                  "key",
                ],
                "type": "object",
              },
              "StatusTransition": Object {
                "description": "Defines an item in a status transition log",
                "properties": Object {
                  "actingUser": Object {
                    "description": "The user that triggered the change of status",
                    "type": "string",
                  },
                  "status": Object {
                    "description": "The status that was transitioned to",
                    "type": "string",
                  },
                  "timestamp": Object {
                    "description": "The time at which the status transition occurred",
                    "type": "string",
                  },
                },
                "required": Array [
                  "timestamp",
                  "status",
                  "actingUser",
                ],
                "type": "object",
              },
              "SubmitSourceDocumentInput": Object {
                "description": "Request to submit a document",
                "properties": Object {
                  "documentId": Object {
                    "type": "string",
                  },
                  "location": Object {
                    "$ref": "#/components/schemas/S3Location",
                  },
                  "name": Object {
                    "description": "Name of the document",
                    "type": "string",
                  },
                  "schemaId": Object {
                    "type": "string",
                  },
                },
                "required": Array [
                  "documentId",
                  "name",
                  "location",
                  "schemaId",
                ],
                "type": "object",
              },
              "UpdateFormInput": Object {
                "description": "A schema defining the extracted data input",
                "properties": Object {
                  "extractedData": Object {
                    "description": "an object representing the extracted data to be updated",
                    "type": "object",
                  },
                  "notes": Object {
                    "description": "optional reviewer entered notes",
                    "type": "string",
                  },
                  "tags": Object {
                    "description": "an optional array of tagIds to support review tagging",
                    "items": Object {
                      "type": "string",
                    },
                    "type": "array",
                  },
                },
                "required": Array [
                  "extractedData",
                ],
                "type": "object",
              },
              "UpdateStatusInput": Object {
                "description": "An object that represents the updated status of the document form",
                "properties": Object {
                  "newStatus": Object {
                    "type": "string",
                  },
                },
                "required": Array [
                  "newStatus",
                ],
                "type": "object",
              },
            },
            "securitySchemes": Object {},
          },
          "info": Object {
            "description": "API for AWS Docs",
            "title": "AWS Docs API",
            "version": "1.0.0",
          },
          "openapi": "3.0.3",
          "paths": Object {
            "/documents": Object {
              "get": Object {
                "description": "List all documents",
                "operationId": "listDocuments",
                "parameters": Array [
                  Object {
                    "$ref": "#/components/parameters/pageSize",
                  },
                  Object {
                    "$ref": "#/components/parameters/nextToken",
                  },
                ],
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/ListDocumentsResponse",
                        },
                      },
                    },
                    "description": "Returns a list of documents",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "listDocumentsLambdaA37EF1B8",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
            "/documents/upload-url": Object {
              "get": Object {
                "description": "Get a presigned url for uploading a document",
                "operationId": "getDocumentUploadUrl",
                "parameters": Array [
                  Object {
                    "in": "query",
                    "name": "fileName",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                  Object {
                    "in": "query",
                    "name": "contentType",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                ],
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/GetDocumentUploadUrlResponse",
                        },
                      },
                    },
                    "description": "Returned presigned url for uploading a document",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "getDocumentUploadUrlLambda18CE0743",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
            "/documents/{documentId}": Object {
              "get": Object {
                "description": "Get details about a document being ingested",
                "operationId": "getDocument",
                "parameters": Array [
                  Object {
                    "in": "path",
                    "name": "documentId",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                ],
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/DocumentMetadata",
                        },
                      },
                    },
                    "description": "Returned on successful retrieval of document metadata",
                    "headers": Object {},
                  },
                  "404": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/ApiError",
                        },
                      },
                    },
                    "description": "Returned when a document is not found",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "getDocumentLambdaD4B182D8",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
            "/documents/{documentId}/forms": Object {
              "get": Object {
                "description": "Get details about the forms within a processed document",
                "operationId": "listDocumentForms",
                "parameters": Array [
                  Object {
                    "in": "path",
                    "name": "documentId",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                  Object {
                    "$ref": "#/components/parameters/pageSize",
                  },
                  Object {
                    "$ref": "#/components/parameters/nextToken",
                  },
                ],
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/ListFormsResponse",
                        },
                      },
                    },
                    "description": "Returned on successful retrieval of document forms",
                    "headers": Object {},
                  },
                  "404": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/ApiError",
                        },
                      },
                    },
                    "description": "Returned when a document is not found",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "listDocumentFormsLambdaAF0DFC27",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
            "/documents/{documentId}/forms/{formId}": Object {
              "get": Object {
                "description": "Get details about a form within a processed document",
                "operationId": "getDocumentForm",
                "parameters": Array [
                  Object {
                    "in": "path",
                    "name": "documentId",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                  Object {
                    "in": "path",
                    "name": "formId",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                ],
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/FormMetadata",
                        },
                      },
                    },
                    "description": "Returned on successful retrieval of the form",
                    "headers": Object {},
                  },
                  "404": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/ApiError",
                        },
                      },
                    },
                    "description": "Returned when a document is not found",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "getDocumentFormLambdaD7292B95",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
            "/documents/{documentId}/forms/{formId}/review": Object {
              "put": Object {
                "description": "Update the extracted data details object from a document form",
                "operationId": "updateFormReview",
                "parameters": Array [
                  Object {
                    "in": "path",
                    "name": "documentId",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                  Object {
                    "in": "path",
                    "name": "formId",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                ],
                "requestBody": Object {
                  "content": Object {
                    "application/json": Object {
                      "schema": Object {
                        "$ref": "#/components/schemas/UpdateFormInput",
                      },
                    },
                  },
                  "required": true,
                },
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/FormMetadata",
                        },
                      },
                    },
                    "description": "Returned on successful update of the form",
                    "headers": Object {},
                  },
                  "404": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/ApiError",
                        },
                      },
                    },
                    "description": "Returned when a document is not found",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "updateFormReviewLambdaAA54EE7D",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
            "/documents/{documentId}/forms/{formId}/status": Object {
              "put": Object {
                "description": "start a new review",
                "operationId": "updateStatus",
                "parameters": Array [
                  Object {
                    "in": "path",
                    "name": "documentId",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                  Object {
                    "in": "path",
                    "name": "formId",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                ],
                "requestBody": Object {
                  "content": Object {
                    "application/json": Object {
                      "schema": Object {
                        "$ref": "#/components/schemas/UpdateStatusInput",
                      },
                    },
                  },
                  "required": true,
                },
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/FormMetadata",
                        },
                      },
                    },
                    "description": "The newly updated form metadata",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "updateStatusLambda7B641729",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
            "/forms": Object {
              "get": Object {
                "description": "List all forms within documents",
                "operationId": "listForms",
                "parameters": Array [
                  Object {
                    "$ref": "#/components/parameters/pageSize",
                  },
                  Object {
                    "$ref": "#/components/parameters/nextToken",
                  },
                ],
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/ListFormsResponse",
                        },
                      },
                    },
                    "description": "Returns a list of forms",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "listFormsLambda04A84401",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
            "/metrics": Object {
              "get": Object {
                "description": "Retrieve average aggregate metrics for disclosure data extraction for the given time period",
                "operationId": "getMetrics",
                "parameters": Array [
                  Object {
                    "in": "query",
                    "name": "startTimestamp",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                  Object {
                    "in": "query",
                    "name": "endTimestamp",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                ],
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/AggregateMetrics",
                        },
                      },
                    },
                    "description": "Aggregate metrics",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "getMetricsLambdaD03F8C6C",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
            "/schemas": Object {
              "get": Object {
                "description": "List all schemas for forms",
                "operationId": "listFormSchemas",
                "parameters": Array [
                  Object {
                    "$ref": "#/components/parameters/pageSize",
                  },
                  Object {
                    "$ref": "#/components/parameters/nextToken",
                  },
                ],
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/ListFormSchemasResponse",
                        },
                      },
                    },
                    "description": "List all registered form schemas",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "listFormSchemasLambda3C0EA7FA",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
              "post": Object {
                "description": "Create a new form schema",
                "operationId": "createFormSchema",
                "requestBody": Object {
                  "content": Object {
                    "application/json": Object {
                      "schema": Object {
                        "$ref": "#/components/schemas/FormSchemaInput",
                      },
                    },
                  },
                  "required": true,
                },
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/FormSchema",
                        },
                      },
                    },
                    "description": "The newly created schema",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "createFormSchemaLambda7AD289FC",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
            "/schemas/{schemaId}": Object {
              "delete": Object {
                "description": "Delete a form schema",
                "operationId": "deleteFormSchema",
                "parameters": Array [
                  Object {
                    "in": "path",
                    "name": "schemaId",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                ],
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/FormSchema",
                        },
                      },
                    },
                    "description": "The deleted schema",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "deleteFormSchemaLambda82A566B0",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
              "get": Object {
                "description": "Retrieve a specific form schema",
                "operationId": "getFormSchema",
                "parameters": Array [
                  Object {
                    "in": "path",
                    "name": "schemaId",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                ],
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/FormSchema",
                        },
                      },
                    },
                    "description": "The newly created schema",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "getFormSchemaLambda797104D8",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
              "put": Object {
                "description": "Update an existing form schema",
                "operationId": "updateFormSchema",
                "parameters": Array [
                  Object {
                    "in": "path",
                    "name": "schemaId",
                    "required": true,
                    "schema": Object {
                      "type": "string",
                    },
                  },
                ],
                "requestBody": Object {
                  "content": Object {
                    "application/json": Object {
                      "schema": Object {
                        "$ref": "#/components/schemas/FormSchema",
                      },
                    },
                  },
                  "required": true,
                },
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/FormSchema",
                        },
                      },
                    },
                    "description": "The updated schema",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "updateFormSchemaLambda69854AA8",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
            "/sources/document": Object {
              "post": Object {
                "description": "Submit a document for processing",
                "operationId": "submitSourceDocument",
                "requestBody": Object {
                  "content": Object {
                    "application/json": Object {
                      "schema": Object {
                        "$ref": "#/components/schemas/SubmitSourceDocumentInput",
                      },
                    },
                  },
                  "required": true,
                },
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/DocumentMetadata",
                        },
                      },
                    },
                    "description": "Returned on successful submission of a form",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "submitSourceDocumentLambdaA214DCA0",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
            "/tags": Object {
              "get": Object {
                "description": "List all form review workflow tags",
                "operationId": "listFormReviewWorkflowTags",
                "parameters": Array [
                  Object {
                    "$ref": "#/components/parameters/pageSize",
                  },
                  Object {
                    "$ref": "#/components/parameters/nextToken",
                  },
                ],
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/ListFormReviewWorkflowTagsResponse",
                        },
                      },
                    },
                    "description": "Returned on successful list of all form review workflow tags",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "listFormReviewWorkflowTagsLambda1C747356",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
              "post": Object {
                "description": "create a form review workflow tag",
                "operationId": "createFormReviewWorkflowTag",
                "requestBody": Object {
                  "content": Object {
                    "application/json": Object {
                      "schema": Object {
                        "$ref": "#/components/schemas/CreateFormReviewWorkflowTagInput",
                      },
                    },
                  },
                  "required": true,
                },
                "responses": Object {
                  "200": Object {
                    "content": Object {
                      "application/json": Object {
                        "schema": Object {
                          "$ref": "#/components/schemas/FormReviewWorkflowTag",
                        },
                      },
                    },
                    "description": "Returned on successful addition of a form review workflow tag",
                    "headers": Object {},
                  },
                },
                "x-amazon-apigateway-auth": Object {
                  "type": "NONE",
                },
                "x-amazon-apigateway-integration": Object {
                  "httpMethod": "POST",
                  "passthroughBehavior": "WHEN_NO_MATCH",
                  "type": "AWS_PROXY",
                  "uri": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":apigateway:",
                        Object {
                          "Ref": "AWS::Region",
                        },
                        ":lambda:path/2015-03-31/functions/",
                        Object {
                          "Fn::GetAtt": Array [
                            "createFormReviewWorkflowTagLambdaF851F454",
                            "Arn",
                          ],
                        },
                        "/invocations",
                      ],
                    ],
                  },
                },
              },
            },
          },
          "x-amazon-apigateway-gateway-responses": Object {
            "BAD_REQUEST_BODY": Object {
              "responseTemplates": Object {
                "application/json": "{\\"message\\": \\"$context.error.validationErrorString\\"}",
              },
              "statusCode": 400,
            },
          },
          "x-amazon-apigateway-request-validator": "all",
          "x-amazon-apigateway-request-validators": Object {
            "all": Object {
              "validateRequestBody": true,
              "validateRequestParameters": true,
            },
          },
        },
        "Name": "ApiTest",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "ApiTestAccount2AC853EB": Object {
      "DependsOn": Array [
        "ApiTest0B514494",
      ],
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "ApiTestCloudWatchRole49F4F360",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
    },
    "ApiTestCloudWatchRole49F4F360": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiTestDeployment59A5FA0380c6a661c156120d32cefc0f58fb9c13": Object {
      "Properties": Object {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": Object {
          "Ref": "ApiTest0B514494",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "ApiTestDeploymentStageprod77F35FA8": Object {
      "Properties": Object {
        "DeploymentId": Object {
          "Ref": "ApiTestDeployment59A5FA0380c6a661c156120d32cefc0f58fb9c13",
        },
        "RestApiId": Object {
          "Ref": "ApiTest0B514494",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "ApiTestLambdaPermissioncreateFormReviewWorkflowTag8493EACF": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "createFormReviewWorkflowTagLambdaF851F454",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissioncreateFormSchema31A09279": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "createFormSchemaLambda7AD289FC",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiondeleteFormSchema1813622C": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "deleteFormSchemaLambda82A566B0",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiongetDocument2B1C76D9": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "getDocumentLambdaD4B182D8",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiongetDocumentForm3FB4A5CE": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "getDocumentFormLambdaD7292B95",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiongetDocumentUploadUrl09A647AA": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "getDocumentUploadUrlLambda18CE0743",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiongetFormSchema562131EE": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "getFormSchemaLambda797104D8",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissiongetMetricsCF13AE28": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "getMetricsLambdaD03F8C6C",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionlistDocumentFormsD28B85A5": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "listDocumentFormsLambdaAF0DFC27",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionlistDocumentsE53DD0B2": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "listDocumentsLambdaA37EF1B8",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionlistFormReviewWorkflowTagsE3F0AEF8": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "listFormReviewWorkflowTagsLambda1C747356",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionlistFormSchemasA7BDA33D": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "listFormSchemasLambda3C0EA7FA",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionlistFormsE173C217": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "listFormsLambda04A84401",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionsubmitSourceDocument84F01611": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "submitSourceDocumentLambdaA214DCA0",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionupdateFormReview3284B764": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "updateFormReviewLambdaAA54EE7D",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionupdateFormSchemaA1785553": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "updateFormSchemaLambda69854AA8",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ApiTestLambdaPermissionupdateStatus3B5E9D8D": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "updateStatusLambda7B641729",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "ApiTest0B514494",
              },
              "/*/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "createFormReviewWorkflowTagLambdaF851F454": Object {
      "DependsOn": Array [
        "createFormReviewWorkflowTagLambdaServiceRole42D71378",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "createFormReviewWorkflowTagLambdaServiceRole42D71378",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "createFormReviewWorkflowTagLambdaServiceRole42D71378": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "createFormSchemaLambda7AD289FC": Object {
      "DependsOn": Array [
        "createFormSchemaLambdaServiceRoleC8B1ABCE",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "createFormSchemaLambdaServiceRoleC8B1ABCE",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "createFormSchemaLambdaServiceRoleC8B1ABCE": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "deleteFormSchemaLambda82A566B0": Object {
      "DependsOn": Array [
        "deleteFormSchemaLambdaServiceRole34313DB3",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "deleteFormSchemaLambdaServiceRole34313DB3",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "deleteFormSchemaLambdaServiceRole34313DB3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "getDocumentFormLambdaD7292B95": Object {
      "DependsOn": Array [
        "getDocumentFormLambdaServiceRole8383A8DF",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "getDocumentFormLambdaServiceRole8383A8DF",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "getDocumentFormLambdaServiceRole8383A8DF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "getDocumentLambdaD4B182D8": Object {
      "DependsOn": Array [
        "getDocumentLambdaServiceRoleC2162A01",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "getDocumentLambdaServiceRoleC2162A01",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "getDocumentLambdaServiceRoleC2162A01": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "getDocumentUploadUrlLambda18CE0743": Object {
      "DependsOn": Array [
        "getDocumentUploadUrlLambdaServiceRoleE0A5064A",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "getDocumentUploadUrlLambdaServiceRoleE0A5064A",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "getDocumentUploadUrlLambdaServiceRoleE0A5064A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "getFormSchemaLambda797104D8": Object {
      "DependsOn": Array [
        "getFormSchemaLambdaServiceRole86A100D1",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "getFormSchemaLambdaServiceRole86A100D1",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "getFormSchemaLambdaServiceRole86A100D1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "getMetricsLambdaD03F8C6C": Object {
      "DependsOn": Array [
        "getMetricsLambdaServiceRole208C4AD4",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "getMetricsLambdaServiceRole208C4AD4",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "getMetricsLambdaServiceRole208C4AD4": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "listDocumentFormsLambdaAF0DFC27": Object {
      "DependsOn": Array [
        "listDocumentFormsLambdaServiceRole5A51F525",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "listDocumentFormsLambdaServiceRole5A51F525",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "listDocumentFormsLambdaServiceRole5A51F525": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "listDocumentsLambdaA37EF1B8": Object {
      "DependsOn": Array [
        "listDocumentsLambdaServiceRole9CC0C0C1",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "listDocumentsLambdaServiceRole9CC0C0C1",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "listDocumentsLambdaServiceRole9CC0C0C1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "listFormReviewWorkflowTagsLambda1C747356": Object {
      "DependsOn": Array [
        "listFormReviewWorkflowTagsLambdaServiceRole18713536",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "listFormReviewWorkflowTagsLambdaServiceRole18713536",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "listFormReviewWorkflowTagsLambdaServiceRole18713536": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "listFormSchemasLambda3C0EA7FA": Object {
      "DependsOn": Array [
        "listFormSchemasLambdaServiceRole9D85886A",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "listFormSchemasLambdaServiceRole9D85886A",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "listFormSchemasLambdaServiceRole9D85886A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "listFormsLambda04A84401": Object {
      "DependsOn": Array [
        "listFormsLambdaServiceRole5E9F0F29",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "listFormsLambdaServiceRole5E9F0F29",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "listFormsLambdaServiceRole5E9F0F29": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "submitSourceDocumentLambdaA214DCA0": Object {
      "DependsOn": Array [
        "submitSourceDocumentLambdaServiceRole52F6521B",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "submitSourceDocumentLambdaServiceRole52F6521B",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "submitSourceDocumentLambdaServiceRole52F6521B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "updateFormReviewLambdaAA54EE7D": Object {
      "DependsOn": Array [
        "updateFormReviewLambdaServiceRole16D0911E",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "updateFormReviewLambdaServiceRole16D0911E",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "updateFormReviewLambdaServiceRole16D0911E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "updateFormSchemaLambda69854AA8": Object {
      "DependsOn": Array [
        "updateFormSchemaLambdaServiceRoleCB53DF54",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "updateFormSchemaLambdaServiceRoleCB53DF54",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "updateFormSchemaLambdaServiceRoleCB53DF54": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "updateStatusLambda7B641729": Object {
      "DependsOn": Array [
        "updateStatusLambdaServiceRoleB3EF2D58",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "test",
        },
        "Handler": "test",
        "Role": Object {
          "Fn::GetAtt": Array [
            "updateStatusLambdaServiceRoleB3EF2D58",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "updateStatusLambdaServiceRoleB3EF2D58": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
