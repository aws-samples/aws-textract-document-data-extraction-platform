# coding: utf-8

"""
    AWS Docs API

    API for AWS Docs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from api_python_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class FormMetadata(
    ComposedBase,
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Metadata about a form within a document
    """
    _required_property_names = set((
        'documentId',
        'documentName',
        'formId',
        'schemaId',
        'numberOfPages',
        'startPageIndex',
        'endPageIndex',
        'location',
        'extractionExecution',
        'schemaSnapshot',
        'statusTransitionLog',
    ))
    documentId = StrSchema
    documentName = StrSchema
    formId = StrSchema
    schemaId = StrSchema
    numberOfPages = IntSchema
    startPageIndex = IntSchema
    endPageIndex = IntSchema

    @classmethod
    @property
    def location(cls) -> typing.Type['S3Location']:
        return S3Location

    @classmethod
    @property
    def extractionExecution(cls) -> typing.Type['ExtractionExecution']:
        return ExtractionExecution
    extractedData = AnyTypeSchema
    originalExtractedData = AnyTypeSchema
    extractedDataMetadata = AnyTypeSchema

    @classmethod
    @property
    def extractionAccuracy(cls) -> typing.Type['ExtractionAccuracy']:
        return ExtractionAccuracy
    averageConfidence = NumberSchema

    @classmethod
    @property
    def schemaSnapshot(cls) -> typing.Type['FormJSONSchema']:
        return FormJSONSchema
    url = StrSchema

    @classmethod
    @property
    def textractOutputLocation(cls) -> typing.Type['S3Location']:
        return S3Location
    
    
    class statusTransitionLog(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['StatusTransition']:
            return StatusTransition
    
    
    class tags(
        ListSchema
    ):
        _items = StrSchema
    notes = StrSchema

    @classmethod
    @property
    @functools.cache
    def _composed_schemas(cls):
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        return {
            'allOf': [
                CreateUpdateDetails,
            ],
            'oneOf': [
            ],
            'anyOf': [
            ],
            'not':
                None
        }

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        documentId: documentId,
        documentName: documentName,
        formId: formId,
        schemaId: schemaId,
        numberOfPages: numberOfPages,
        startPageIndex: startPageIndex,
        endPageIndex: endPageIndex,
        location: location,
        extractionExecution: extractionExecution,
        schemaSnapshot: schemaSnapshot,
        statusTransitionLog: statusTransitionLog,
        extractedData: typing.Union[extractedData, Unset] = unset,
        originalExtractedData: typing.Union[originalExtractedData, Unset] = unset,
        extractedDataMetadata: typing.Union[extractedDataMetadata, Unset] = unset,
        extractionAccuracy: typing.Union['ExtractionAccuracy', Unset] = unset,
        averageConfidence: typing.Union[averageConfidence, Unset] = unset,
        url: typing.Union[url, Unset] = unset,
        textractOutputLocation: typing.Union['S3Location', Unset] = unset,
        tags: typing.Union[tags, Unset] = unset,
        notes: typing.Union[notes, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'FormMetadata':
        return super().__new__(
            cls,
            *args,
            documentId=documentId,
            documentName=documentName,
            formId=formId,
            schemaId=schemaId,
            numberOfPages=numberOfPages,
            startPageIndex=startPageIndex,
            endPageIndex=endPageIndex,
            location=location,
            extractionExecution=extractionExecution,
            schemaSnapshot=schemaSnapshot,
            statusTransitionLog=statusTransitionLog,
            extractedData=extractedData,
            originalExtractedData=originalExtractedData,
            extractedDataMetadata=extractedDataMetadata,
            extractionAccuracy=extractionAccuracy,
            averageConfidence=averageConfidence,
            url=url,
            textractOutputLocation=textractOutputLocation,
            tags=tags,
            notes=notes,
            _configuration=_configuration,
            **kwargs,
        )

from api_python_client.model.create_update_details import CreateUpdateDetails
from api_python_client.model.extraction_accuracy import ExtractionAccuracy
from api_python_client.model.extraction_execution import ExtractionExecution
from api_python_client.model.form_json_schema import FormJSONSchema
from api_python_client.model.s3_location import S3Location
from api_python_client.model.status_transition import StatusTransition
