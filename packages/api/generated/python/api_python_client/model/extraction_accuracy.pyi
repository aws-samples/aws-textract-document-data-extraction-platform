# coding: utf-8

"""
    AWS Docs API

    API for AWS Docs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from api_python_client import schemas  # noqa: F401


class ExtractionAccuracy(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A collection of measures of the accuracy of data extracted for the form, computed once the form has been reviewed by a human
    """


    class MetaOapg:
        required = {
            "fieldDistancePercentage",
            "fieldCorrectnessPercentage",
        }
        class properties:
            fieldDistancePercentage = schemas.NumberSchema
            fieldCorrectnessPercentage = schemas.NumberSchema
            __annotations__ = {
                "fieldDistancePercentage": fieldDistancePercentage,
                "fieldCorrectnessPercentage": fieldCorrectnessPercentage,
            }
    
    fieldDistancePercentage: MetaOapg.properties.fieldDistancePercentage
    fieldCorrectnessPercentage: MetaOapg.properties.fieldCorrectnessPercentage
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["fieldDistancePercentage"]) -> MetaOapg.properties.fieldDistancePercentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["fieldCorrectnessPercentage"]) -> MetaOapg.properties.fieldCorrectnessPercentage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing.Literal["fieldDistancePercentage", "fieldCorrectnessPercentage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["fieldDistancePercentage"]) -> MetaOapg.properties.fieldDistancePercentage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["fieldCorrectnessPercentage"]) -> MetaOapg.properties.fieldCorrectnessPercentage: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing.Literal["fieldDistancePercentage", "fieldCorrectnessPercentage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fieldDistancePercentage: typing.Union[MetaOapg.properties.fieldDistancePercentage, decimal.Decimal, int, float, ],
        fieldCorrectnessPercentage: typing.Union[MetaOapg.properties.fieldCorrectnessPercentage, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExtractionAccuracy':
        return super().__new__(
            cls,
            *args,
            fieldDistancePercentage=fieldDistancePercentage,
            fieldCorrectnessPercentage=fieldCorrectnessPercentage,
            _configuration=_configuration,
            **kwargs,
        )
