# coding: utf-8

"""
    AWS Docs API

    API for AWS Docs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from api_python_client import schemas  # noqa: F401


class FormSchemaInput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A schema defining the structured data expected for a form (without an id)
    """


    class MetaOapg:
        required = {
            "schema",
            "title",
        }
        class properties:
            title = schemas.StrSchema
        
            @classmethod
            @property
            def schema(cls) -> typing.Type['FormJSONSchema']:
                return FormJSONSchema
            description = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "schema": schema,
                "description": description,
            }
    
    schema: 'FormJSONSchema'
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["schema"]) -> 'FormJSONSchema': ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing.Literal["title", "schema", "description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["schema"]) -> 'FormJSONSchema': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing.Literal["title", "schema", "description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        schema: 'FormJSONSchema',
        title: typing.Union[MetaOapg.properties.title, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FormSchemaInput':
        return super().__new__(
            cls,
            *args,
            schema=schema,
            title=title,
            description=description,
            _configuration=_configuration,
            **kwargs,
        )

from api_python_client.model.form_json_schema import FormJSONSchema
