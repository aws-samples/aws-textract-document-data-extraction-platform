# coding: utf-8

"""
    AWS Docs API

    API for AWS Docs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from api_python_client import schemas  # noqa: F401


class GetDocumentUploadUrlResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Response to getting a document upload url
    """


    class MetaOapg:
        required = {
            "documentId",
            "location",
            "url",
        }
        class properties:
            documentId = schemas.StrSchema
            url = schemas.StrSchema
        
            @classmethod
            @property
            def location(cls) -> typing.Type['S3Location']:
                return S3Location
            __annotations__ = {
                "documentId": documentId,
                "url": url,
                "location": location,
            }
    
    documentId: MetaOapg.properties.documentId
    location: 'S3Location'
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["documentId"]) -> MetaOapg.properties.documentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing.Literal["location"]) -> 'S3Location': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing.Literal["documentId", "url", "location", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["documentId"]) -> MetaOapg.properties.documentId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing.Literal["location"]) -> 'S3Location': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing.Literal["documentId", "url", "location", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        documentId: typing.Union[MetaOapg.properties.documentId, str, ],
        location: 'S3Location',
        url: typing.Union[MetaOapg.properties.url, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetDocumentUploadUrlResponse':
        return super().__new__(
            cls,
            *args,
            documentId=documentId,
            location=location,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from api_python_client.model.s3_location import S3Location
