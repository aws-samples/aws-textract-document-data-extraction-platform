/* tslint:disable */
/* eslint-disable */
/**
 * AWS Docs API
 * API for AWS Docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AggregateMetrics,
    AggregateMetricsFromJSON,
    AggregateMetricsToJSON,
    ApiError,
    ApiErrorFromJSON,
    ApiErrorToJSON,
    CreateFormReviewWorkflowTagInput,
    CreateFormReviewWorkflowTagInputFromJSON,
    CreateFormReviewWorkflowTagInputToJSON,
    DocumentMetadata,
    DocumentMetadataFromJSON,
    DocumentMetadataToJSON,
    FormMetadata,
    FormMetadataFromJSON,
    FormMetadataToJSON,
    FormReviewWorkflowTag,
    FormReviewWorkflowTagFromJSON,
    FormReviewWorkflowTagToJSON,
    FormSchema,
    FormSchemaFromJSON,
    FormSchemaToJSON,
    FormSchemaInput,
    FormSchemaInputFromJSON,
    FormSchemaInputToJSON,
    GetDocumentUploadUrlResponse,
    GetDocumentUploadUrlResponseFromJSON,
    GetDocumentUploadUrlResponseToJSON,
    ListDocumentsResponse,
    ListDocumentsResponseFromJSON,
    ListDocumentsResponseToJSON,
    ListFormReviewWorkflowTagsResponse,
    ListFormReviewWorkflowTagsResponseFromJSON,
    ListFormReviewWorkflowTagsResponseToJSON,
    ListFormSchemasResponse,
    ListFormSchemasResponseFromJSON,
    ListFormSchemasResponseToJSON,
    ListFormsResponse,
    ListFormsResponseFromJSON,
    ListFormsResponseToJSON,
    SubmitSourceDocumentInput,
    SubmitSourceDocumentInputFromJSON,
    SubmitSourceDocumentInputToJSON,
    UpdateFormInput,
    UpdateFormInputFromJSON,
    UpdateFormInputToJSON,
    UpdateStatusInput,
    UpdateStatusInputFromJSON,
    UpdateStatusInputToJSON,
} from '../models';

export interface CreateFormReviewWorkflowTagRequest {
    createFormReviewWorkflowTagInput: CreateFormReviewWorkflowTagInput;
}

export interface CreateFormSchemaRequest {
    formSchemaInput: FormSchemaInput;
}

export interface DeleteFormSchemaRequest {
    schemaId: string;
}

export interface GetDocumentRequest {
    documentId: string;
}

export interface GetDocumentFormRequest {
    documentId: string;
    formId: string;
}

export interface GetDocumentUploadUrlRequest {
    fileName: string;
    contentType: string;
}

export interface GetFormSchemaRequest {
    schemaId: string;
}

export interface GetMetricsRequest {
    startTimestamp: string;
    endTimestamp: string;
}

export interface ListDocumentFormsRequest {
    documentId: string;
    pageSize: number;
    nextToken?: string;
}

export interface ListDocumentsRequest {
    pageSize: number;
    nextToken?: string;
}

export interface ListFormReviewWorkflowTagsRequest {
    pageSize: number;
    nextToken?: string;
}

export interface ListFormSchemasRequest {
    pageSize: number;
    nextToken?: string;
}

export interface ListFormsRequest {
    pageSize: number;
    nextToken?: string;
}

export interface SubmitSourceDocumentRequest {
    submitSourceDocumentInput: SubmitSourceDocumentInput;
}

export interface UpdateFormReviewRequest {
    documentId: string;
    formId: string;
    updateFormInput: UpdateFormInput;
}

export interface UpdateFormSchemaRequest {
    schemaId: string;
    formSchema: FormSchema;
}

export interface UpdateStatusRequest {
    documentId: string;
    formId: string;
    updateStatusInput: UpdateStatusInput;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * create a form review workflow tag
     */
    async createFormReviewWorkflowTagRaw(requestParameters: CreateFormReviewWorkflowTagRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FormReviewWorkflowTag>> {
        if (requestParameters.createFormReviewWorkflowTagInput === null || requestParameters.createFormReviewWorkflowTagInput === undefined) {
            throw new runtime.RequiredError('createFormReviewWorkflowTagInput','Required parameter requestParameters.createFormReviewWorkflowTagInput was null or undefined when calling createFormReviewWorkflowTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFormReviewWorkflowTagInputToJSON(requestParameters.createFormReviewWorkflowTagInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormReviewWorkflowTagFromJSON(jsonValue));
    }

    /**
     * create a form review workflow tag
     */
    async createFormReviewWorkflowTag(requestParameters: CreateFormReviewWorkflowTagRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FormReviewWorkflowTag> {
        const response = await this.createFormReviewWorkflowTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new form schema
     */
    async createFormSchemaRaw(requestParameters: CreateFormSchemaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FormSchema>> {
        if (requestParameters.formSchemaInput === null || requestParameters.formSchemaInput === undefined) {
            throw new runtime.RequiredError('formSchemaInput','Required parameter requestParameters.formSchemaInput was null or undefined when calling createFormSchema.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/schemas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormSchemaInputToJSON(requestParameters.formSchemaInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormSchemaFromJSON(jsonValue));
    }

    /**
     * Create a new form schema
     */
    async createFormSchema(requestParameters: CreateFormSchemaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FormSchema> {
        const response = await this.createFormSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a form schema
     */
    async deleteFormSchemaRaw(requestParameters: DeleteFormSchemaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FormSchema>> {
        if (requestParameters.schemaId === null || requestParameters.schemaId === undefined) {
            throw new runtime.RequiredError('schemaId','Required parameter requestParameters.schemaId was null or undefined when calling deleteFormSchema.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schemas/{schemaId}`.replace(`{${"schemaId"}}`, encodeURIComponent(String(requestParameters.schemaId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormSchemaFromJSON(jsonValue));
    }

    /**
     * Delete a form schema
     */
    async deleteFormSchema(requestParameters: DeleteFormSchemaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FormSchema> {
        const response = await this.deleteFormSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details about a document being ingested
     */
    async getDocumentRaw(requestParameters: GetDocumentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DocumentMetadata>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling getDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/documents/{documentId}`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentMetadataFromJSON(jsonValue));
    }

    /**
     * Get details about a document being ingested
     */
    async getDocument(requestParameters: GetDocumentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DocumentMetadata> {
        const response = await this.getDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details about a form within a processed document
     */
    async getDocumentFormRaw(requestParameters: GetDocumentFormRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FormMetadata>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling getDocumentForm.');
        }

        if (requestParameters.formId === null || requestParameters.formId === undefined) {
            throw new runtime.RequiredError('formId','Required parameter requestParameters.formId was null or undefined when calling getDocumentForm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/documents/{documentId}/forms/{formId}`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))).replace(`{${"formId"}}`, encodeURIComponent(String(requestParameters.formId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormMetadataFromJSON(jsonValue));
    }

    /**
     * Get details about a form within a processed document
     */
    async getDocumentForm(requestParameters: GetDocumentFormRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FormMetadata> {
        const response = await this.getDocumentFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a presigned url for uploading a document
     */
    async getDocumentUploadUrlRaw(requestParameters: GetDocumentUploadUrlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetDocumentUploadUrlResponse>> {
        if (requestParameters.fileName === null || requestParameters.fileName === undefined) {
            throw new runtime.RequiredError('fileName','Required parameter requestParameters.fileName was null or undefined when calling getDocumentUploadUrl.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getDocumentUploadUrl.');
        }

        const queryParameters: any = {};

        if (requestParameters.fileName !== undefined) {
            queryParameters['fileName'] = requestParameters.fileName;
        }

        if (requestParameters.contentType !== undefined) {
            queryParameters['contentType'] = requestParameters.contentType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/documents/upload-url`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDocumentUploadUrlResponseFromJSON(jsonValue));
    }

    /**
     * Get a presigned url for uploading a document
     */
    async getDocumentUploadUrl(requestParameters: GetDocumentUploadUrlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetDocumentUploadUrlResponse> {
        const response = await this.getDocumentUploadUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a specific form schema
     */
    async getFormSchemaRaw(requestParameters: GetFormSchemaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FormSchema>> {
        if (requestParameters.schemaId === null || requestParameters.schemaId === undefined) {
            throw new runtime.RequiredError('schemaId','Required parameter requestParameters.schemaId was null or undefined when calling getFormSchema.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schemas/{schemaId}`.replace(`{${"schemaId"}}`, encodeURIComponent(String(requestParameters.schemaId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormSchemaFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific form schema
     */
    async getFormSchema(requestParameters: GetFormSchemaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FormSchema> {
        const response = await this.getFormSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve average aggregate metrics for disclosure data extraction for the given time period
     */
    async getMetricsRaw(requestParameters: GetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AggregateMetrics>> {
        if (requestParameters.startTimestamp === null || requestParameters.startTimestamp === undefined) {
            throw new runtime.RequiredError('startTimestamp','Required parameter requestParameters.startTimestamp was null or undefined when calling getMetrics.');
        }

        if (requestParameters.endTimestamp === null || requestParameters.endTimestamp === undefined) {
            throw new runtime.RequiredError('endTimestamp','Required parameter requestParameters.endTimestamp was null or undefined when calling getMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.startTimestamp !== undefined) {
            queryParameters['startTimestamp'] = requestParameters.startTimestamp;
        }

        if (requestParameters.endTimestamp !== undefined) {
            queryParameters['endTimestamp'] = requestParameters.endTimestamp;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AggregateMetricsFromJSON(jsonValue));
    }

    /**
     * Retrieve average aggregate metrics for disclosure data extraction for the given time period
     */
    async getMetrics(requestParameters: GetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AggregateMetrics> {
        const response = await this.getMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details about the forms within a processed document
     */
    async listDocumentFormsRaw(requestParameters: ListDocumentFormsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ListFormsResponse>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling listDocumentForms.');
        }

        if (requestParameters.pageSize === null || requestParameters.pageSize === undefined) {
            throw new runtime.RequiredError('pageSize','Required parameter requestParameters.pageSize was null or undefined when calling listDocumentForms.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters['nextToken'] = requestParameters.nextToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/documents/{documentId}/forms`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFormsResponseFromJSON(jsonValue));
    }

    /**
     * Get details about the forms within a processed document
     */
    async listDocumentForms(requestParameters: ListDocumentFormsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ListFormsResponse> {
        const response = await this.listDocumentFormsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all documents
     */
    async listDocumentsRaw(requestParameters: ListDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ListDocumentsResponse>> {
        if (requestParameters.pageSize === null || requestParameters.pageSize === undefined) {
            throw new runtime.RequiredError('pageSize','Required parameter requestParameters.pageSize was null or undefined when calling listDocuments.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters['nextToken'] = requestParameters.nextToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/documents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListDocumentsResponseFromJSON(jsonValue));
    }

    /**
     * List all documents
     */
    async listDocuments(requestParameters: ListDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ListDocumentsResponse> {
        const response = await this.listDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all form review workflow tags
     */
    async listFormReviewWorkflowTagsRaw(requestParameters: ListFormReviewWorkflowTagsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ListFormReviewWorkflowTagsResponse>> {
        if (requestParameters.pageSize === null || requestParameters.pageSize === undefined) {
            throw new runtime.RequiredError('pageSize','Required parameter requestParameters.pageSize was null or undefined when calling listFormReviewWorkflowTags.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters['nextToken'] = requestParameters.nextToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFormReviewWorkflowTagsResponseFromJSON(jsonValue));
    }

    /**
     * List all form review workflow tags
     */
    async listFormReviewWorkflowTags(requestParameters: ListFormReviewWorkflowTagsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ListFormReviewWorkflowTagsResponse> {
        const response = await this.listFormReviewWorkflowTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all schemas for forms
     */
    async listFormSchemasRaw(requestParameters: ListFormSchemasRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ListFormSchemasResponse>> {
        if (requestParameters.pageSize === null || requestParameters.pageSize === undefined) {
            throw new runtime.RequiredError('pageSize','Required parameter requestParameters.pageSize was null or undefined when calling listFormSchemas.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters['nextToken'] = requestParameters.nextToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schemas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFormSchemasResponseFromJSON(jsonValue));
    }

    /**
     * List all schemas for forms
     */
    async listFormSchemas(requestParameters: ListFormSchemasRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ListFormSchemasResponse> {
        const response = await this.listFormSchemasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all forms within documents
     */
    async listFormsRaw(requestParameters: ListFormsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ListFormsResponse>> {
        if (requestParameters.pageSize === null || requestParameters.pageSize === undefined) {
            throw new runtime.RequiredError('pageSize','Required parameter requestParameters.pageSize was null or undefined when calling listForms.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters['nextToken'] = requestParameters.nextToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListFormsResponseFromJSON(jsonValue));
    }

    /**
     * List all forms within documents
     */
    async listForms(requestParameters: ListFormsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ListFormsResponse> {
        const response = await this.listFormsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit a document for processing
     */
    async submitSourceDocumentRaw(requestParameters: SubmitSourceDocumentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DocumentMetadata>> {
        if (requestParameters.submitSourceDocumentInput === null || requestParameters.submitSourceDocumentInput === undefined) {
            throw new runtime.RequiredError('submitSourceDocumentInput','Required parameter requestParameters.submitSourceDocumentInput was null or undefined when calling submitSourceDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sources/document`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmitSourceDocumentInputToJSON(requestParameters.submitSourceDocumentInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentMetadataFromJSON(jsonValue));
    }

    /**
     * Submit a document for processing
     */
    async submitSourceDocument(requestParameters: SubmitSourceDocumentRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DocumentMetadata> {
        const response = await this.submitSourceDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the extracted data details object from a document form
     */
    async updateFormReviewRaw(requestParameters: UpdateFormReviewRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FormMetadata>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling updateFormReview.');
        }

        if (requestParameters.formId === null || requestParameters.formId === undefined) {
            throw new runtime.RequiredError('formId','Required parameter requestParameters.formId was null or undefined when calling updateFormReview.');
        }

        if (requestParameters.updateFormInput === null || requestParameters.updateFormInput === undefined) {
            throw new runtime.RequiredError('updateFormInput','Required parameter requestParameters.updateFormInput was null or undefined when calling updateFormReview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/documents/{documentId}/forms/{formId}/review`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))).replace(`{${"formId"}}`, encodeURIComponent(String(requestParameters.formId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFormInputToJSON(requestParameters.updateFormInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormMetadataFromJSON(jsonValue));
    }

    /**
     * Update the extracted data details object from a document form
     */
    async updateFormReview(requestParameters: UpdateFormReviewRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FormMetadata> {
        const response = await this.updateFormReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing form schema
     */
    async updateFormSchemaRaw(requestParameters: UpdateFormSchemaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FormSchema>> {
        if (requestParameters.schemaId === null || requestParameters.schemaId === undefined) {
            throw new runtime.RequiredError('schemaId','Required parameter requestParameters.schemaId was null or undefined when calling updateFormSchema.');
        }

        if (requestParameters.formSchema === null || requestParameters.formSchema === undefined) {
            throw new runtime.RequiredError('formSchema','Required parameter requestParameters.formSchema was null or undefined when calling updateFormSchema.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/schemas/{schemaId}`.replace(`{${"schemaId"}}`, encodeURIComponent(String(requestParameters.schemaId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FormSchemaToJSON(requestParameters.formSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormSchemaFromJSON(jsonValue));
    }

    /**
     * Update an existing form schema
     */
    async updateFormSchema(requestParameters: UpdateFormSchemaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FormSchema> {
        const response = await this.updateFormSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * start a new review
     */
    async updateStatusRaw(requestParameters: UpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FormMetadata>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling updateStatus.');
        }

        if (requestParameters.formId === null || requestParameters.formId === undefined) {
            throw new runtime.RequiredError('formId','Required parameter requestParameters.formId was null or undefined when calling updateStatus.');
        }

        if (requestParameters.updateStatusInput === null || requestParameters.updateStatusInput === undefined) {
            throw new runtime.RequiredError('updateStatusInput','Required parameter requestParameters.updateStatusInput was null or undefined when calling updateStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/documents/{documentId}/forms/{formId}/status`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))).replace(`{${"formId"}}`, encodeURIComponent(String(requestParameters.formId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStatusInputToJSON(requestParameters.updateStatusInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormMetadataFromJSON(jsonValue));
    }

    /**
     * start a new review
     */
    async updateStatus(requestParameters: UpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FormMetadata> {
        const response = await this.updateStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
