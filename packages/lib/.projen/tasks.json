{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files"
    },
    "install": {
      "name": "install",
      "description": "Install and upgrade dependencies",
      "steps": [
        {
          "exec": "poetry update"
        }
      ]
    },
    "lint": {
      "name": "lint",
      "steps": [
        {
          "exec": "licenseheaders -E .py -x '*/__init__.py' -d aws_document_extraction_platform_lib -t ../../header.txt"
        },
        {
          "exec": "if [ -d tests ]; then licenseheaders -E .py -x '*/__init__.py' -d tests -t ../../header.txt; fi"
        },
        {
          "exec": "if [ -d test ]; then licenseheaders -E .py -x '*/__init__.py' -d test -t ../../header.txt; fi"
        },
        {
          "exec": "black aws_document_extraction_platform_lib"
        },
        {
          "exec": "if [ -d tests ]; then black tests; fi"
        },
        {
          "exec": "if [ -d test ]; then black test; fi"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "poetry build"
        },
        {
          "exec": "mkdir -p dist/lambda && rm -rf dist/lambda/*"
        },
        {
          "exec": "cp -r aws_document_extraction_platform_lib dist/lambda/aws_document_extraction_platform_lib"
        },
        {
          "exec": "poetry export --without-hashes --format=requirements.txt > dist/lambda/requirements.txt"
        },
        {
          "exec": "pip install -r dist/lambda/requirements.txt --target dist/lambda --upgrade --platform manylinux2014_x86_64 --only-binary :all:"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "publish": {
      "name": "publish",
      "description": "Uploads the package to PyPI.",
      "steps": [
        {
          "exec": "poetry publish"
        }
      ]
    },
    "publish:test": {
      "name": "publish:test",
      "description": "Uploads the package against a test PyPI endpoint.",
      "steps": [
        {
          "exec": "poetry publish -r testpypi"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "pytest"
        },
        {
          "spawn": "lint"
        }
      ]
    }
  },
  "env": {
    "VIRTUAL_ENV": "$(env -u VIRTUAL_ENV poetry env info -p || echo '')",
    "PATH": "$(echo $(env -u VIRTUAL_ENV poetry env info -p || echo '')/bin:$PATH)"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
